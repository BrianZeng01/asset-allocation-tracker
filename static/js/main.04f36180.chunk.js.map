{"version":3,"sources":["components/old_class_components/inputs.js","components/old_class_components/charts.js","components/old_class_components/calculations.js","components/old_class_components/assetManager.js","components/ButtonBarFn.js","components/InputsFn.js","components/ChartsFn.js","components/CalculationsFn.js","components/assetManagerFn.js","App.js","serviceWorker.js","index.js","images/currentAllocationDemo.png","images/newAllocationDemo.png"],"names":["Inputs","array","n","arr","i","push","toggleReallocate","inputs","document","getElementsByClassName","props","reallocate","j","length","style","display","required","this","className","counter","map","count","index","key","id","type","placeholder","Component","Charts","changeDisplay","state","setState","changeSort","sortBy","selectColor","colorNum","colors","pieChart","dataArray","forEach","splice","title","value","color","data","label","dataEntry","Math","round","percentage","animate","segmentsShift","center","viewBoxSize","backgroundColor","barChart","tickers","values","sort","a","b","labels","datasets","borderColor","borderWidth","height","options","text","maintainAspectRatio","legend","table","totalValue","onClick","Calculations","recalculate","calculateCurrent","elem","getElementById","calculateNew","currentAssets","toFixed","Number","EPSILON","newTotalValue","reallocatedAssets","ticker","newShares","floor","buySell","newValue","cash","console","log","prevProps","ButtonBar","addAsset","testValues","clearHandler","reallocateHandler","reallocateMode","collectInputs","deleteInput","deleteStyle","margin","cursor","React","useEffect","assets","querySelectorAll","action","onSubmit","e","preventDefault","input","defaultValue","shares","price","targetPercentage","useState","setDisplay","setSortBy","asset","change","localeCompare","setCurrentAssets","setReallocatedAssets","setTotalValue","querySelector","total","temp","parseInt","AssetManagerFn","localStorage","getItem","setReallocateMode","displayCalculations","setDisplayCalculations","JSON","parse","setInputs","calculations","setCalculations","setItem","stringify","calculate","newAsset","targetPercentageTotal","inputList","innerHTML","setTimeout","remove","filter","alt","src","currentAllocationDemo","newAllocationDemo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.04f36180.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Inputs extends Component {\n  array = (n) => {\n    var arr = [];\n    for (var i = 1; i <= n; i++) {\n      arr.push(i);\n    }\n    return arr;\n  };\n\n  toggleReallocate = () => {\n    var inputs = document.getElementsByClassName(\"toggle\");\n    if (this.props.reallocate === \"true\") {\n      for (var j = 0; j < inputs.length; j++) {\n        inputs[j].style.display = \"inline\";\n        inputs[j].required = true;\n      }\n    } else {\n      for (var i = 0; i < inputs.length; i++) {\n        inputs[i].style.display = \"none\";\n        inputs[i].required = false;\n      }\n    }\n  };\n\n  componentDidMount() {\n    this.toggleReallocate();\n  }\n  componentDidUpdate() {\n    this.toggleReallocate();\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"inputs\">\n          <table>\n            <tbody>\n              <tr>\n                <th>Ticker</th>\n                <th>Shares</th>\n                <th>Price</th>\n                {this.props.reallocate === \"true\" ? (\n                  <th>Target Percentage</th>\n                ) : null}\n              </tr>\n              {this.array(this.props.counter).map((count, index) => (\n                <tr className={`input${index}`}  key={index}>\n                  <td>\n                    <input\n                      id={\"ticker\" + count}\n                      type=\"text\"\n                      required\n                      placeholder=\"APPL\"\n                    ></input>\n                  </td>\n                  <td>\n                    <input\n                      id={\"shares\" + count}\n                      type=\"number\"\n                      required\n                      placeholder=\"30\"\n                    ></input>\n                  </td>\n                  <td>\n                    <input\n                      id={\"price\" + count}\n                      type=\"text\"\n                      required\n                      placeholder=\"150\"\n                    ></input>\n                  </td>\n                  <td>\n                    <input\n                      className=\"toggle\"\n                      id={\"target\" + count}\n                      type=\"number\"\n                      required\n                      placeholder=\"10\"\n                    ></input>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Inputs;\n","import { PieChart } from \"react-minimal-pie-chart\";\nimport { Bar } from \"react-chartjs-2\";\nimport React, { Component } from \"react\";\n\nclass Charts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { display: \"percentage\", sortBy: \"numerically\" };\n  }\n\n  changeDisplay = () => {\n    this.state.display === \"percentage\"\n      ? this.setState({ display: \"value\" })\n      : this.setState({ display: \"percentage\" });\n  };\n\n  changeSort = () => {\n    this.state.sortBy === \"numerically\"\n      ? this.setState({ sortBy: \"alphabetically\" })\n      : this.setState({ sortBy: \"numerically\" });\n  };\n\n  selectColor = (colorNum, colors) => {\n    if (colors < 1) colors = 1; // defaults to one color - avoid divide by zero\n    return \"hsl(\" + ((120 + colorNum * (360 / colors)) % 360) + \",100%,70%)\";\n  };\n  // https://www.npmjs.com/package/react-minimal-pie-chart\n  pieChart = (arr) => {\n    var dataArray = [];\n    // var colorArray = randomColor({\n    //   count: arr.length,\n    //   luminosity: \"light\",\n    //   hue: \"#213458\",\n    // });\n    arr.forEach((arr, index) => {\n      arr.splice(-1, 1, this.selectColor(index, 20));\n      dataArray.push({\n        title: arr[0],\n        value: arr[arr.length - 2],\n        color: this.selectColor(index, 20),\n      });\n    });\n\n    return (\n      <div className=\"pieChart\">\n        <div className=\"pieChartContent\">\n          <div className=\"chart\">\n            <PieChart\n              className=\"piechart\"\n              data={dataArray}\n              label={({ dataEntry }) => `${Math.round(dataEntry.percentage)}%`}\n              animate\n              segmentsShift={0.75}\n              center={[55, 55]}\n              viewBoxSize={[110, 110]}\n            />\n          </div>\n\n          <div className=\"chartColors\">\n            {arr.map((arr, index) => (\n              <div className=\"color\" key={index}>\n                <div\n                  className=\"square\"\n                  style={{\n                    backgroundColor: arr[arr.length - 1],\n                  }}\n                ></div>\n                {arr[0]}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // https://www.educative.io/edpresso/how-to-use-chartjs-to-create-charts-in-react\n  barChart = (arr, display, sortBy) => {\n    var tickers = [];\n    var values = [];\n    if (sortBy === \"numerically\") {\n      arr.sort((a, b) => b[1] - a[1]);\n    } else {\n      arr.sort();\n    }\n\n    arr.forEach((arr) => {\n      tickers.push(arr[0]);\n      values.push(arr[display === \"percentage\" ? arr.length - 2 : 1]);\n    });\n    values.push(0);\n    var state = {\n      labels: tickers,\n      datasets: [\n        {\n          label: display === \"percentage\" ? \"Percentage\" : \"Value\",\n          backgroundColor: \"#1F77AC\",\n          borderColor: \"#213458\",\n          borderWidth: 3,\n          data: values,\n        },\n      ],\n    };\n    return (\n      <Bar\n        className=\"bar\"\n        height={350}\n        data={state}\n        options={{\n          title: {\n            display: true,\n            text:\n              display === \"percentage\"\n                ? \"Percentage of Portfolio\"\n                : \"Asset Values\",\n          },\n          maintainAspectRatio: false,\n          legend: {\n            display: false,\n          },\n        }}\n      />\n    );\n  };\n\n  table = (arr, type, sortBy) => {\n    var totalValue = 0;\n    if (sortBy === \"numerically\") {\n      arr.sort((a, b) => b[1] - a[1]);\n    } else {\n      arr.sort();\n    }\n    arr.forEach((arr) => {\n      totalValue += arr[1];\n    });\n    return (\n      <div className=\"table\">\n        <table>\n          <tbody>\n            <tr>\n              <th>Ticker</th>\n              <th>Value</th>\n              <th>Shares</th>\n              {type === \"reallocated\" ? <th>Buy/Sell</th> : null}\n              <th>Percentage</th>\n            </tr>\n            {arr.map((arr, index) => (\n              <tr key={index}>\n                <td>{arr[0]}</td>\n                <td>{arr[1]}</td>\n                <td>{arr[2]}</td>\n                <td>{arr[3]}</td>\n                {type === \"reallocated\" ? <td>{arr[4]}</td> : null}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <h3>Total Value = {totalValue}</h3>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <>\n        {this.table(this.props.dataArray, this.props.type, this.state.sortBy)}\n        {this.pieChart(this.props.dataArray)}\n        <div className=\"barChart\">\n          {this.barChart(\n            this.props.dataArray,\n            this.state.display,\n            this.state.sortBy\n          )}\n        </div>\n        <div className=\"view\">\n          <button onClick={this.changeDisplay}>\n            {this.state.display === \"percentage\"\n              ? \"View Value\"\n              : \"View Percentages\"}\n          </button>\n          <button onClick={this.changeSort}>\n            {this.state.sortBy === \"alphabetically\"\n              ? \"Sort Numerically\"\n              : \"Sort Alphabetically\"}\n          </button>\n        </div>\n      </>\n    );\n  }\n}\nexport default Charts;\n","import React, { Component } from \"react\";\nimport Charts from \"./charts.js\";\n\nclass Calculations extends Component {\n  constructor(props) {\n    super(props);\n    // current [ticker,value,shares,percentage, color]\n    // reallocated [ticker, value, shares, buysell, percentage, color]\n    this.state = { currentAssets: [], reallocatedAssets: [] };\n  }\n\n  componentDidMount() {\n    console.log(\"mounting\");\n    for (var i = 0; i < this.props.data.length; i++) {\n      var inputs = this.props.data[i];\n      document.getElementById(\"ticker\" + (i + 1)).value = inputs[0];\n      document.getElementById(\"shares\" + (i + 1)).value = inputs[1];\n      document.getElementById(\"price\" + (i + 1)).value = inputs[2];\n      if (inputs.length > 3) {\n        document.getElementById(\"target\" + (i + 1)).value = inputs[3];\n      }\n    }\n\n    this.recalculate();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.recalculate();\n      console.log(\"recalculated in didupdate\");\n      if (prevProps.reallocate !== this.props.reallocate) {\n      }\n    }\n  }\n  recalculate = async () => {\n    await this.calculateCurrent();\n    var elem = document.getElementById(\"reallocatedAssets\");\n    if (this.props.reallocate === \"true\") {\n      this.calculateNew();\n      if (this.props.data[0].length >= 4) {\n        elem.style.display = \"grid\";\n      }\n    } else {\n      elem.style.display = \"none\";\n    }\n  };\n\n  calculateCurrent = () => {\n    var inputs = this.props.data;\n    var totalValue = 0;\n    var currentAssets = [];\n\n    inputs.forEach((arr) => {\n      var value = +(arr[1] * arr[2]).toFixed(2);\n      currentAssets.push([arr[0], value, arr[1]]);\n      totalValue += arr[1] * arr[2];\n    });\n    currentAssets.forEach((arr) => {\n      arr.push(\n        Math.round(((arr[1] / totalValue) * 100 + Number.EPSILON) * 100) / 100\n      );\n      arr.push(\"none\");\n    });\n\n    this.setState({ currentAssets: currentAssets });\n    this.setState({ totalValue: totalValue });\n  };\n\n  calculateNew = () => {\n    var inputs = this.props.data;\n    var newTotalValue = 0;\n    var reallocatedAssets = [];\n\n    inputs.forEach((arr) => {\n      var ticker = arr[0];\n      var newShares = Math.floor(\n        ((arr[3] / 100) * this.state.totalValue) / arr[2]\n      );\n      var buySell = newShares - arr[1];\n      var newValue = +(newShares * arr[2]).toFixed(2);\n\n      newTotalValue += newValue;\n      reallocatedAssets.push([ticker, newValue, newShares, buySell]);\n    });\n    var cash =\n      Math.round(\n        (this.state.totalValue - newTotalValue) * 100 + Number.EPSILON\n      ) / 100;\n    reallocatedAssets.push([\"CASH\", cash, 0, 0]);\n    reallocatedAssets.forEach((arr) => {\n      arr.push(\n        Math.round(\n          ((arr[1] / this.state.totalValue) * 100 + Number.EPSILON) * 100\n        ) / 100\n      );\n      arr.push(\"none\");\n    });\n\n    this.setState({ reallocatedAssets: reallocatedAssets });\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"calculations\">\n          <div className=\"currentAssets\">\n            <h1>Current Allocation</h1>\n            <Charts dataArray={this.state.currentAssets} type=\"current\" />\n          </div>\n          <div id=\"reallocatedAssets\" className=\"reallocatedAssets\">\n            <h1>New Allocation</h1>\n            <Charts\n              dataArray={this.state.reallocatedAssets}\n              type=\"reallocated\"\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Calculations;\n","import React, { Component } from \"react\";\nimport Inputs from \"./inputs.js\";\nimport Calculations from \"./calculations.js\";\nimport currentAllocationDemo from \"../../images/currentAllocationDemo.png\";\nimport newAllocationDemo from \"../../images/newAllocationDemo.png\";\n\nclass AssetManager extends Component {\n  constructor() {\n    super();\n    this.state = {};\n    if (localStorage.getItem(\"counter\")) {\n      this.state.counter = parseInt(localStorage.getItem(\"counter\"));\n    } else {\n      this.state.counter = 1;\n      localStorage.setItem(\"counter\", 1);\n    }\n    if (localStorage.getItem(\"reallocate\")) {\n      this.state.reallocate = localStorage.getItem(\"reallocate\");\n    } else {\n      this.state.reallocate = \"true\";\n      localStorage.setItem(\"reallocate\", \"true\");\n    }\n    if (localStorage.getItem(\"calculations\")) {\n      this.state.calculations = JSON.parse(\n        localStorage.getItem(\"calculations\")\n      );\n    } else {\n      this.state.calculations = [];\n    }\n    //  Test 1\n    // // ---------------------------\n    // this.state.counter = 3;\n    // this.state.reallocate = \"true\";\n    // this.state.calculations = [\n    //   [\"APPL\", 30, 150, 20],\n    //   [\"AMD\", 100, 75, 20],\n    //   [\"VFV\", 130, 70, 60],\n    // ];\n    // ----------------------------\n    // Expected Outcome = [AMD, 4200, 56shares, sell44, 19.91% ],\n    //                    [APPL, 4200,28shares,sell2,19.91%],\n    //                    [VFV, 12600, 180shares, buy50, 59.7%],\n    //                    [CASH, 100]\n    // Test 2\n    // this.state.counter = 9;\n    // this.state.reallocate = \"true\";\n    // this.state.calculations = [\n    //   [\"APPL\", 30, 150, 10],\n    //   [\"AMD\", 100, 75, 10],\n    //   [\"VFV\", 130, 70, 30],\n    //   [\"GOOG\", 10, 400, 5],\n    //   [\"FB\", 20, 250, 10],\n    //   [\"BTC\", 40, 250, 5],\n    //   [\"VGRO\", 130, 20, 15],\n    //   [\"TD\", 40, 80, 10],\n    //   [\"BYND\", 30, 200, 5],\n    // ];\n  }\n\n  addAsset = () => {\n    localStorage.setItem(\n      \"counter\",\n      parseInt(localStorage.getItem(\"counter\")) + 1\n    );\n    this.setState({ counter: parseInt(localStorage.getItem(\"counter\")) });\n  };\n\n  removeAsset = () => {\n    if (this.state.counter > 1) {\n      localStorage.setItem(\n        \"counter\",\n        parseInt(localStorage.getItem(\"counter\")) - 1\n      );\n      this.setState({ counter: localStorage.getItem(\"counter\") });\n    }\n  };\n\n  collectInputs = () => {\n    var assets = document.getElementsByClassName(\"input\");\n    var calcs = [];\n    var targetPercentageTotal = 0;\n    for (var i = 0; i < assets.length; i++) {\n      var loops;\n      var arr = [];\n      var elem = assets[i].getElementsByTagName(\"input\");\n      if (this.state.reallocate === \"true\") {\n        loops = 4;\n        targetPercentageTotal += parseInt(elem[3].value);\n      } else {\n        loops = 3;\n      }\n      if (targetPercentageTotal > 100) {\n        document.getElementById(\"error\").innerHTML =\n          \"Sum of Target Percentages must not exceed 100%\";\n        return false;\n      }\n      for (var j = 0; j < loops; j++) {\n        var item = elem[j].value;\n        if (typeof item === \"number\") {\n          arr.push(Math.round(((item * 100 + Number.EPSILON) * 100) / 100));\n        } else {\n          arr.push(item);\n        }\n      }\n      calcs.push(arr);\n    }\n\n    calcs.sort();\n    this.setState({ calculations: calcs });\n    localStorage.setItem(\"calculations\", JSON.stringify(calcs));\n    console.log(calcs);\n    console.log(\"submitted\");\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"assets\">\n            <h1>Portfolio Allocation Tool</h1>\n          <div className=\"buttons\">\n            <button onClick={this.addAsset}>Add Asset</button>\n            <button onClick={this.removeAsset}>Remove Last Asset</button>\n            <button\n              onClick={() => {\n                localStorage.setItem(\n                  \"reallocate\",\n                  localStorage.getItem(\"reallocate\") === \"true\"\n                    ? \"false\"\n                    : \"true\"\n                );\n                this.setState({\n                  reallocate: localStorage.getItem(\"reallocate\"),\n                });\n              }}\n            >\n              {this.state.reallocate === \"true\"\n                ? \"Current Allocation Only\"\n                : \"Reallocate Assets\"}\n            </button>\n            <button\n              onClick={() => {\n                localStorage.clear();\n                window.location.reload();\n              }}\n            >\n              Clear\n            </button>\n          </div>\n          <form\n            action=\"#\"\n            onSubmit={() => {\n              this.collectInputs();\n            }}\n          >\n            <Inputs\n              counter={this.state.counter}\n              reallocate={this.state.reallocate}\n            />\n            <h4>\n              Note: Sum of Target Percentage under 100 will allocate remaining\n              percentage to cash\n            </h4>\n            <button type=\"submit\" className=\"calculate\">\n              Calculate\n            </button>\n            <div id=\"error\"></div>\n          </form>\n        </div>\n        {this.state.calculations.length >= 1 ? (\n          <Calculations\n            data={this.state.calculations}\n            reallocate={this.state.reallocate}\n          />\n        ) : (\n          <div className=\"demoImages\">\n            <h2>Demo View</h2>\n            <div>\n              <img alt=\"demoImage\" src={currentAllocationDemo}></img>\n              <img alt=\"demoImage\" src={newAllocationDemo}></img>\n            </div>\n          </div>\n        )}\n      </>\n    );\n  }\n}\n\nexport default AssetManager;\n","import React, { useState } from 'react';\n\nconst ButtonBar = ({addAsset, testValues, clearHandler, reallocateHandler, reallocateMode}) => {\n\n    return (\n        <div className=\"buttons\">\n            <button onClick={addAsset}>Add Asset</button>\n            <button\n              onClick={reallocateHandler}\n            >\n              {reallocateMode === \"true\"\n                ? \"Current Allocation Only\"\n                : \"Reallocate Assets\"}\n            </button>\n            <button\n              onClick={clearHandler}\n            >\n              Clear\n            </button>\n            <button onClick={testValues}>\n              Use Test Values\n            </button>\n        </div>\n    );\n}\n\nexport default ButtonBar;","import React, { useState } from \"react\";\n\nconst Inputs = ({ collectInputs, deleteInput, inputs, reallocateMode }) => {\n  const deleteStyle = {margin: 0, cursor: \"pointer\"};\n\n  React.useEffect(() => {\n    toggleReallocate();\n  }, [reallocateMode, inputs]);\n\n  const toggleReallocate = () => {\n    let assets = document.querySelectorAll(\".toggle\");\n    if (reallocateMode === \"true\") {\n      for (var j = 0; j < inputs.length; j++) {\n        assets[j].style.display = \"inline\";\n        assets[j].required = true;\n      }\n    } else {\n      for (var i = 0; i < inputs.length; i++) {\n        assets[i].style.display = \"none\";\n        assets[i].required = false;\n      }\n    }\n  };\n\n  return (\n    <form\n      action=\"#\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        collectInputs();\n      }}\n    >\n      {inputs.length > 0 ? (\n        <div className=\"inputs\">\n          <table>\n            <tbody>\n              <tr>\n                <th>Ticker</th>\n                <th>Shares</th>\n                <th>Price</th>\n                {reallocateMode === \"true\" ? <th>Target Percentage</th> : null}\n              </tr>\n              {inputs.map((input) => (\n                <tr className={`asset${input.id} input`} key={input.id}>\n                  <td>\n                    <input\n                      id={\"ticker\" + input.id}\n                      type=\"text\"\n                      required\n                      placeholder=\"APPL\"\n                      defaultValue={input.ticker}\n                    ></input>\n                  </td>\n                  <td>\n                    <input\n                      id={\"shares\" + input.id}\n                      type=\"number\"\n                      required\n                      placeholder=\"30\"\n                      defaultValue={input.shares}\n                    ></input>\n                  </td>\n                  <td>\n                    <input\n                      id={\"price\" + input.id}\n                      type=\"number\"\n                      required\n                      placeholder=\"150\"\n                      defaultValue={input.price}\n                    ></input>\n                  </td>\n                  <td>\n                    <input\n                      className=\"toggle\"\n                      style={\n                        reallocateMode === \"true\"\n                          ? { display: \"inline\" }\n                          : { display: \"none\" }\n                      }\n                      id={\"target\" + input.id}\n                      type=\"number\"\n                      required\n                      placeholder=\"10\"\n                      defaultValue={input.targetPercentage}\n                    ></input>\n                  </td>\n                  <td>\n                    <button onClick={() => deleteInput(input.id)}\n                    style={deleteStyle}>X</button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <h4>\n            Note: Sum of Target Percentage under 100 will allocate remaining\n            percentage to cash\n          </h4>\n          <button type=\"submit\" className=\"calculate\">\n            Calculate\n          </button>\n          <div id=\"error\"></div>\n        </div>\n      ) : null}\n    </form>\n  );\n};\n\nexport default Inputs;\n","import React, { useState, useEffect } from \"react\";\nimport { PieChart } from \"react-minimal-pie-chart\";\nimport { Bar } from \"react-chartjs-2\";\n\nconst Charts = ({assets, type}) => {\n  const [display, setDisplay] = useState(\"value\");\n  const [sortBy, setSortBy] = useState(\"alphabetically\");\n\n  const changeDisplay = () => {\n    display === \"percentage\" ? setDisplay(\"value\") : setDisplay(\"percentage\");\n  };\n\n  const changeSort = () => {\n    sortBy === \"numerically\"\n      ? setSortBy(\"alphabetically\")\n      : setSortBy(\"numerically\");\n  };\n\n  const selectColor = (colorNum, colors) => {\n    if (colors < 1) colors = 1; // defaults to one color - avoid divide by zero\n    return \"hsl(\" + ((120 + colorNum * (360 / colors)) % 360) + \",100%,70%)\";\n  };\n\n  // https://www.npmjs.com/package/react-minimal-pie-chart\n  const pieChart = (assets) => {\n    let dataArray = [];\n    assets.forEach((asset, index) => {\n      dataArray.push({\n        title: asset.ticker,\n        value: asset.value,\n        color: selectColor(index*2, 20),\n      });\n    });\n\n    return (\n      <div className=\"pieChart\">\n        <div className=\"pieChartContent\">\n          <div className=\"chart\">\n            <PieChart\n              className=\"piechart\"\n              data={dataArray}\n              label={({ dataEntry }) => `${Math.round(dataEntry.percentage)}%`}\n              animate\n              segmentsShift={0.75}\n              center={[55, 55]}\n              viewBoxSize={[110, 110]}\n            />\n          </div>\n\n          <div className=\"chartColors\">\n            {dataArray.map((data, index) => (\n              <div className=\"color\" key={index}>\n                <div\n                  className=\"square\"\n                  style={{\n                    backgroundColor: data.color\n                  }}\n                ></div>\n                {data.title}\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  // https://www.educative.io/edpresso/how-to-use-chartjs-to-create-charts-in-react\n  const barChart = (assets, display, sortBy) => {\n    let tickers = [];\n    let values = [];\n    if (sortBy === \"numerically\") {\n      assets.sort((a, b) => b.value - a.value);\n    } else {\n      assets.sort((a, b) => a.ticker.localeCompare(b.ticker));\n    }\n\n    assets.forEach((asset) => {\n      tickers.push(asset.ticker);\n      values.push(display === \"percentage\" ? asset.percentage : asset.value);\n    });\n    values.push(0);\n    let state = {\n      labels: tickers,\n      datasets: [\n        {\n          label: display === \"percentage\" ? \"Percentage\" : \"Value\",\n          backgroundColor: \"#1F77AC\",\n          borderColor: \"#213458\",\n          borderWidth: 3,\n          data: values,\n        },\n      ],\n    };\n    return (\n      <Bar\n        className=\"bar\"\n        height={350}\n        data={state}\n        options={{\n          title: {\n            display: true,\n            text:\n              display === \"percentage\"\n                ? \"Percentage of Portfolio\"\n                : \"Asset Values\",\n          },\n          maintainAspectRatio: false,\n          legend: {\n            display: false,\n          },\n        }}\n      />\n    );\n  };\n\n  const table = (assets, type, sortBy) => {\n    let totalValue = 0;\n    if (sortBy === \"numerically\") {\n      assets.sort((a, b) => b.value - a.value);\n    } else {\n      assets.sort();\n    }\n    assets.forEach((asset) => {\n      totalValue += asset.value;\n    });\n    return (\n      <div className=\"table\">\n        <table>\n          <tbody>\n            <tr>\n              <th>Ticker</th>\n              <th>Value</th>\n              <th>Shares</th>\n              <th>Percentage</th>\n              {type === \"reallocated\" ? <th>Buy/Sell</th> : null}\n            </tr>\n            {assets.map((asset, index) => (\n              <tr key={index}>\n                <td>{asset.ticker}</td>\n                <td>{asset.value}</td>\n                <td>{asset.shares}</td>\n                <td>{asset.percentage}</td>\n                {type === \"reallocated\" ? <td>{asset.change}</td> : null}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n        <h3>Total Value = {totalValue}</h3>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      {table(assets,type, sortBy)}\n      {pieChart(assets)}\n      <div className=\"barChart\">\n        {barChart(\n          assets,\n          display,\n          sortBy\n        )}\n      </div>\n      <div className=\"view\">\n        <button onClick={changeDisplay}>\n          {display === \"percentage\"\n            ? \"View Value\"\n            : \"View Percentages\"}\n        </button>\n        <button onClick={changeSort}>\n          {sortBy === \"alphabetically\"\n            ? \"Sort Numerically\"\n            : \"Sort Alphabetically\"}\n        </button>\n      </div>\n    </>\n  );\n};\nexport default Charts;","import React, { useState } from \"react\";\nimport Charts from \"./ChartsFn.js\";\n\nconst Calculations = ({ inputs, reallocateMode }) => {\n  const [currentAssets, setCurrentAssets] = useState([]);\n  const [reallocatedAssets, setReallocatedAssets] = useState([]);\n\n  const [totalValue, setTotalValue] = useState(0);\n\n  React.useEffect(() => {\n    recalculate();\n  }, [inputs, totalValue]);\n\n  const recalculate = () => {\n    calculateCurrent();\n    let elem = document.querySelector(\"#reallocatedAssets\");\n    if (reallocateMode === \"true\") {\n      calculateNew();\n      elem.style.display = \"grid\";\n    } else {\n      elem.style.display = \"none\";\n    }\n  };\n\n  const calculateCurrent = () => {\n    let total = 0;\n    let temp = [];\n\n    inputs.forEach((input) => {\n      let value = parseInt((input.shares * input.price).toFixed(2));\n      temp.push({ ticker: input.ticker, value: value, shares: input.shares });\n      total += value;\n    });\n    temp.forEach((asset) => {\n      asset[\"percentage\"] =\n        Math.round(((asset.value / total) * 100 + Number.EPSILON) * 100) / 100;\n    });\n\n    setCurrentAssets(temp);\n    setTotalValue(total);\n    console.log(\"current allocation calculated\");\n  };\n\n  const calculateNew = () => {\n    let newTotalValue = 0;\n    let reallocatedAssets = [];\n\n    inputs.forEach((input) => {\n      let ticker = input.ticker;\n      let newShares = Math.floor(\n        ((input.targetPercentage / 100) * totalValue) / input.price\n      );\n      let buySell = newShares - input.shares;\n      let newValue = parseInt((newShares * input.price).toFixed(2));\n      let percentage =\n        Math.round(((newValue / totalValue) * 100 + Number.EPSILON) * 100) /\n        100;\n\n      newTotalValue += newValue;\n      reallocatedAssets.push({\n        ticker: ticker,\n        value: newValue,\n        shares: newShares,\n        percentage: percentage,\n        change: buySell,\n      });\n    });\n    let cash =\n      Math.round((totalValue - newTotalValue) * 100 + Number.EPSILON) / 100;\n    let percentage = \n        Math.round(((cash / totalValue) * 100 + Number.EPSILON) * 100) /\n        100;\n    reallocatedAssets.push({\n      ticker: \"CASH\",\n      value: cash,\n      shares: cash,\n      percentage,\n      change: 0,\n    });\n\n    setReallocatedAssets(reallocatedAssets); \n    console.log(\"new allocation calculated\");\n  };\n\n  return (\n    <div className=\"calculations\">\n      <div className=\"currentAssets\">\n        <h1>Current Allocation</h1>\n        <Charts assets={currentAssets} type=\"current\" />\n      </div>\n      <div id=\"reallocatedAssets\" className=\"reallocatedAssets\">\n        <h1>New Allocation</h1>\n        <Charts assets={reallocatedAssets} type=\"reallocated\" />\n      </div>\n    </div>\n  );\n};\n\nexport default Calculations;\n","import React, { useState } from \"react\";\nimport ButtonBar from \"./ButtonBarFn.js\";\nimport Inputs from \"./InputsFn.js\";\nimport Calculations from \"./CalculationsFn.js\";\nimport currentAllocationDemo from \"../images/currentAllocationDemo.png\";\nimport newAllocationDemo from \"../images/newAllocationDemo.png\";\n\nconst AssetManagerFn = () => {\n  const [reallocateMode, setReallocateMode] = useState(\n    localStorage.getItem(\"reallocateMode\") || \"true\"\n  );\n\n  const [displayCalculations, setDisplayCalculations] = useState(\n    localStorage.getItem(\"displayCalculations\") || \"false\"\n  );\n\n  // Each item in the inputs array will be an map containing\n  // {id, ticker, shares, price, target percentage}\n  const [inputs, setInputs] = useState(\n    JSON.parse(localStorage.getItem(\"inputs\")) || []\n  );\n\n  // Each item in the calculations array will be an map containing\n  // {ticker, value, shares, change, targetPercentage}\n  const [calculations, setCalculations] = useState(\n    JSON.parse(localStorage.getItem(\"calculations\")) || []\n  );\n\n  // Anytime something changes we save everything to local storage\n  // All the localstorage setting done here\n  React.useEffect(() => {\n    localStorage.setItem(\"reallocateMode\", reallocateMode);\n    localStorage.setItem(\"inputs\", JSON.stringify(inputs));\n    localStorage.setItem(\"calculations\", JSON.stringify(calculations));\n    localStorage.setItem(\"displayCalculations\", displayCalculations);\n  }, [inputs, reallocateMode, displayCalculations, calculations]);\n\n  const reallocateHandler = () => {\n    setReallocateMode(reallocateMode === \"true\" ? \"false\" : \"true\");\n    console.log(\"reallocate Handled\");\n  };\n\n  const clearHandler = () => {\n    setInputs([]);\n    setCalculations([]);\n    setDisplayCalculations(\"false\");\n    console.log(\"Assets Cleared\");\n  };\n\n  const addAsset = () => {\n    console.log(\"added asset\");\n    let nextId = inputs.length > 0 ? inputs[inputs.length - 1].id + 1 : 0;\n    let newAsset = {\n      id: nextId,\n      ticker: \"\",\n      shares: \"\",\n      price: \"\",\n      targetPercentage: \"\",\n    };\n    setInputs([...inputs, newAsset]);\n  };\n\n  const testValues = () => {\n    setInputs([\n      { id: 0, ticker: \"AMD\", shares: 100, price: 75, targetPercentage: 10 },\n      { id: 1, ticker: \"APPL\", shares: 30, price: 150, targetPercentage: 10 },\n      { id: 2, ticker: \"VFV\", shares: 130, price: 70, targetPercentage: 30 },\n      { id: 3, ticker: \"GOOG\", shares: 10, price: 400, targetPercentage: 5 },\n      { id: 4, ticker: \"FB\", shares: 20, price: 250, targetPercentage: 10 },\n      { id: 5, ticker: \"BTC\", shares: 40, price: 250, targetPercentage: 5 },\n      { id: 6, ticker: \"VGRO\", shares: 130, price: 20, targetPercentage: 15 },\n      { id: 7, ticker: \"TD\", shares: 40, price: 80, targetPercentage: 10 },\n      { id: 8, ticker: \"BYND\", shares: 30, price: 200, targetPercentage: 5 },\n    ]);\n    console.log(\"Test values being used\");\n  };\n\n  const deleteInput = (id) => {\n    setInputs(\n      inputs.filter((i) => {\n        return i.id !== id;\n      })\n    );\n    console.log(`input ${id} deleted`);\n  };\n\n  const collectInputs = () => {\n    let assets = document.querySelectorAll(\".input\");\n    let temp = [];\n    let targetPercentageTotal = 0;\n    assets.forEach((asset, index) => {\n      let inputList = asset.querySelectorAll(\"input\");\n      let id = index;\n      let ticker = inputList[0].value;\n      let shares = inputList[1].value;\n      let price = inputList[2].value;\n      let targetPercentage = parseInt(inputList[3].value);\n      temp.push({\n        id: id,\n        ticker: ticker,\n        shares: shares,\n        price: price,\n        targetPercentage: targetPercentage,\n      });\n      targetPercentageTotal += targetPercentage;\n    });\n    setInputs(temp);\n    if (reallocateMode === \"true\" && targetPercentageTotal > 100) {\n      document.querySelector(\"#error\").innerHTML =\n        '<h2 class=\"errormsg\">Sum of Target Percentages must not exceed 100%</h2>';\n      setTimeout(() => {\n        document.querySelector(\".errormsg\").remove();\n      }, 3000);\n      return;\n    }\n    calculate();\n    setDisplayCalculations(\"true\");\n    console.log(\"Inputs saved\");\n  };\n\n  const calculate = () => {\n    setCalculations(inputs);\n  };\n\n  return (\n    <>\n      <div className=\"assets\">\n        <h1>Portfolio Allocation Tool</h1>\n        <ButtonBar\n          addAsset={addAsset}\n          testValues={testValues}\n          clearHandler={clearHandler}\n          reallocateHandler={reallocateHandler}\n          reallocateMode={reallocateMode}\n        />\n        <Inputs\n          collectInputs={collectInputs}\n          deleteInput={deleteInput}\n          inputs={inputs}\n          reallocateMode={reallocateMode}\n        />\n      </div>\n      {displayCalculations === \"true\" ? (\n        <Calculations inputs={calculations} reallocateMode={reallocateMode} />\n      ) : (\n        <div className=\"demoImages\">\n          <h2>Demo View</h2>\n          <div>\n            <img alt=\"demoImage\" src={currentAllocationDemo}></img>\n            <img alt=\"demoImage\" src={newAllocationDemo}></img>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default AssetManagerFn;\n","import React from \"react\";\nimport AssetManager from \"./components/old_class_components/assetManager.js\";\nimport AssetManagerFn from \"./components/assetManagerFn.js\";\nimport \"./style.css\";\n\nfunction App() {\n  return (\n    <>\n      <AssetManagerFn />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/currentAllocationDemo.cebaf131.png\";","module.exports = __webpack_public_path__ + \"static/media/newAllocationDemo.b142bd2b.png\";"],"sourceRoot":""}