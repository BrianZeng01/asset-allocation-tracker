{"version":3,"sources":["components/old_class_components/inputs.js","components/old_class_components/charts.js","components/old_class_components/calculations.js","components/old_class_components/assetManager.js","components/ButtonBarFn.js","components/InputsFn.js","components/ChartsFn.js","components/CalculationsFn.js","components/assetManagerFn.js","App.js","serviceWorker.js","index.js","images/currentAllocationDemo.png","images/newAllocationDemo.png"],"names":["Inputs","array","n","arr","i","push","toggleReallocate","inputs","document","getElementsByClassName","props","reallocate","j","length","style","display","required","this","className","counter","map","count","index","key","id","type","placeholder","Component","Charts","changeDisplay","state","setState","changeSort","sortBy","selectColor","colorNum","colors","pieChart","dataArray","forEach","splice","title","value","color","data","label","dataEntry","Math","round","percentage","animate","segmentsShift","center","viewBoxSize","backgroundColor","barChart","tickers","values","sort","a","b","labels","datasets","borderColor","borderWidth","height","options","text","maintainAspectRatio","legend","table","totalValue","onClick","Calculations","recalculate","calculateCurrent","elem","getElementById","calculateNew","currentAssets","toFixed","Number","EPSILON","newTotalValue","reallocatedAssets","ticker","newShares","floor","buySell","newValue","cash","console","log","prevProps","ButtonBar","addAsset","testValues","clearHandler","reallocateHandler","reallocateMode","collectInputs","deleteInput","deleteStyle","margin","cursor","React","useEffect","assets","querySelectorAll","action","onSubmit","e","preventDefault","input","defaultValue","shares","price","targetPercentage","useState","setDisplay","setSortBy","asset","change","localeCompare","setCurrentAssets","setReallocatedAssets","setTotalValue","querySelector","total","temp","parseFloat","cashObj","cashInCurrent","obj","toLowerCase","AssetManagerFn","localStorage","getItem","setReallocateMode","displayCalculations","setDisplayCalculations","JSON","parse","setInputs","calculations","setCalculations","setItem","stringify","calculate","newAsset","targetPercentageTotal","inputList","innerHTML","setTimeout","remove","filter","alt","src","currentAllocationDemo","newAllocationDemo","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"0OA4FeA,E,4MAzFbC,MAAQ,SAACC,GAEP,IADA,IAAIC,EAAM,GACDC,EAAI,EAAGA,GAAKF,EAAGE,IACtBD,EAAIE,KAAKD,GAEX,OAAOD,G,EAGTG,iBAAmB,WACjB,IAAIC,EAASC,SAASC,uBAAuB,UAC7C,GAA8B,SAA1B,EAAKC,MAAMC,WACb,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,IACjCL,EAAOK,GAAGE,MAAMC,QAAU,SAC1BR,EAAOK,GAAGI,UAAW,OAGvB,IAAK,IAAIZ,EAAI,EAAGA,EAAIG,EAAOM,OAAQT,IACjCG,EAAOH,GAAGU,MAAMC,QAAU,OAC1BR,EAAOH,GAAGY,UAAW,G,kEAMzBC,KAAKX,qB,2CAGLW,KAAKX,qB,+BAIL,OACE,oCACE,yBAAKY,UAAU,UACb,+BACE,+BACE,4BACE,sCACA,sCACA,qCAC2B,SAA1BD,KAAKP,MAAMC,WACV,iDACE,MAELM,KAAKhB,MAAMgB,KAAKP,MAAMS,SAASC,KAAI,SAACC,EAAOC,GAAR,OAClC,wBAAIJ,UAAS,eAAUI,GAAUC,IAAKD,GACpC,4BACE,2BACEE,GAAI,SAAWH,EACfI,KAAK,OACLT,UAAQ,EACRU,YAAY,UAGhB,4BACE,2BACEF,GAAI,SAAWH,EACfI,KAAK,SACLT,UAAQ,EACRU,YAAY,QAGhB,4BACE,2BACEF,GAAI,QAAUH,EACdI,KAAK,OACLT,UAAQ,EACRU,YAAY,SAGhB,4BACE,2BACER,UAAU,SACVM,GAAI,SAAWH,EACfI,KAAK,SACLT,UAAQ,EACRU,YAAY,oB,GA7EbC,a,yCC4LNC,E,kDAzLb,WAAYlB,GAAQ,IAAD,8BACjB,cAAMA,IAIRmB,cAAgB,WACS,eAAvB,EAAKC,MAAMf,QACP,EAAKgB,SAAS,CAAEhB,QAAS,UACzB,EAAKgB,SAAS,CAAEhB,QAAS,gBARZ,EAWnBiB,WAAa,WACW,gBAAtB,EAAKF,MAAMG,OACP,EAAKF,SAAS,CAAEE,OAAQ,mBACxB,EAAKF,SAAS,CAAEE,OAAQ,iBAdX,EAiBnBC,YAAc,SAACC,EAAUC,GAEvB,OADIA,EAAS,IAAGA,EAAS,GAClB,QAAW,IAAMD,GAAY,IAAMC,IAAW,IAAO,cAnB3C,EAsBnBC,SAAW,SAAClC,GACV,IAAImC,EAAY,GAehB,OATAnC,EAAIoC,SAAQ,SAACpC,EAAKmB,GAChBnB,EAAIqC,QAAQ,EAAG,EAAG,EAAKN,YAAYZ,EAAO,KAC1CgB,EAAUjC,KAAK,CACboC,MAAOtC,EAAI,GACXuC,MAAOvC,EAAIA,EAAIU,OAAS,GACxB8B,MAAO,EAAKT,YAAYZ,EAAO,SAKjC,yBAAKJ,UAAU,YACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,SACb,kBAAC,WAAD,CACEA,UAAU,WACV0B,KAAMN,EACNO,MAAO,gBAAGC,EAAH,EAAGA,UAAH,gBAAsBC,KAAKC,MAAMF,EAAUG,YAA3C,MACPC,SAAO,EACPC,cAAe,IACfC,OAAQ,CAAC,GAAI,IACbC,YAAa,CAAC,IAAK,QAIvB,yBAAKnC,UAAU,eACZf,EAAIiB,KAAI,SAACjB,EAAKmB,GAAN,OACP,yBAAKJ,UAAU,QAAQK,IAAKD,GAC1B,yBACEJ,UAAU,SACVJ,MAAO,CACLwC,gBAAiBnD,EAAIA,EAAIU,OAAS,MAGrCV,EAAI,WA9DA,EAwEnBoD,SAAW,SAACpD,EAAKY,EAASkB,GACxB,IAAIuB,EAAU,GACVC,EAAS,GACE,gBAAXxB,EACF9B,EAAIuD,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAKD,EAAE,MAE5BxD,EAAIuD,OAGNvD,EAAIoC,SAAQ,SAACpC,GACXqD,EAAQnD,KAAKF,EAAI,IACjBsD,EAAOpD,KAAKF,EAAgB,eAAZY,EAA2BZ,EAAIU,OAAS,EAAI,OAE9D4C,EAAOpD,KAAK,GACZ,IAAIyB,EAAQ,CACV+B,OAAQL,EACRM,SAAU,CACR,CACEjB,MAAmB,eAAZ9B,EAA2B,aAAe,QACjDuC,gBAAiB,UACjBS,YAAa,UACbC,YAAa,EACbpB,KAAMa,KAIZ,OACE,kBAAC,MAAD,CACEvC,UAAU,MACV+C,OAAQ,IACRrB,KAAMd,EACNoC,QAAS,CACPzB,MAAO,CACL1B,SAAS,EACToD,KACc,eAAZpD,EACI,0BACA,gBAERqD,qBAAqB,EACrBC,OAAQ,CACNtD,SAAS,OAjHA,EAwHnBuD,MAAQ,SAACnE,EAAKsB,EAAMQ,GAClB,IAAIsC,EAAa,EASjB,MARe,gBAAXtC,EACF9B,EAAIuD,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAE,GAAKD,EAAE,MAE5BxD,EAAIuD,OAENvD,EAAIoC,SAAQ,SAACpC,GACXoE,GAAcpE,EAAI,MAGlB,yBAAKe,UAAU,SACb,+BACE,+BACE,4BACE,sCACA,qCACA,sCACU,gBAATO,EAAyB,wCAAoB,KAC9C,2CAEDtB,EAAIiB,KAAI,SAACjB,EAAKmB,GAAN,OACP,wBAAIC,IAAKD,GACP,4BAAKnB,EAAI,IACT,4BAAKA,EAAI,IACT,4BAAKA,EAAI,IACT,4BAAKA,EAAI,IACC,gBAATsB,EAAyB,4BAAKtB,EAAI,IAAW,WAKtD,6CAAmBoE,KAtJvB,EAAKzC,MAAQ,CAAEf,QAAS,aAAckB,OAAQ,eAF7B,E,qDA8JjB,OACE,oCACGhB,KAAKqD,MAAMrD,KAAKP,MAAM4B,UAAWrB,KAAKP,MAAMe,KAAMR,KAAKa,MAAMG,QAC7DhB,KAAKoB,SAASpB,KAAKP,MAAM4B,WAC1B,yBAAKpB,UAAU,YACZD,KAAKsC,SACJtC,KAAKP,MAAM4B,UACXrB,KAAKa,MAAMf,QACXE,KAAKa,MAAMG,SAGf,yBAAKf,UAAU,QACb,4BAAQsD,QAASvD,KAAKY,eACI,eAAvBZ,KAAKa,MAAMf,QACR,aACA,oBAEN,4BAAQyD,QAASvD,KAAKe,YACG,mBAAtBf,KAAKa,MAAMG,OACR,mBACA,6B,GAnLKN,aCsHN8C,E,kDAtHb,WAAY/D,GAAQ,IAAD,8BACjB,cAAMA,IA6BRgE,YA9BmB,sBA8BL,4BAAAf,EAAA,sEACN,EAAKgB,mBADC,OAERC,EAAOpE,SAASqE,eAAe,qBACL,SAA1B,EAAKnE,MAAMC,YACb,EAAKmE,eACD,EAAKpE,MAAMkC,KAAK,GAAG/B,QAAU,IAC/B+D,EAAK9D,MAAMC,QAAU,SAGvB6D,EAAK9D,MAAMC,QAAU,OATX,2CA9BK,EA2CnB4D,iBAAmB,WACjB,IAAIpE,EAAS,EAAKG,MAAMkC,KACpB2B,EAAa,EACbQ,EAAgB,GAEpBxE,EAAOgC,SAAQ,SAACpC,GACd,IAAIuC,IAAUvC,EAAI,GAAKA,EAAI,IAAI6E,QAAQ,GACvCD,EAAc1E,KAAK,CAACF,EAAI,GAAIuC,EAAOvC,EAAI,KACvCoE,GAAcpE,EAAI,GAAKA,EAAI,MAE7B4E,EAAcxC,SAAQ,SAACpC,GACrBA,EAAIE,KACF0C,KAAKC,MAAuD,KAA/C7C,EAAI,GAAKoE,EAAc,IAAMU,OAAOC,UAAkB,KAErE/E,EAAIE,KAAK,WAGX,EAAK0B,SAAS,CAAEgD,cAAeA,IAC/B,EAAKhD,SAAS,CAAEwC,WAAYA,KA7DX,EAgEnBO,aAAe,WACb,IAAIvE,EAAS,EAAKG,MAAMkC,KACpBuC,EAAgB,EAChBC,EAAoB,GAExB7E,EAAOgC,SAAQ,SAACpC,GACd,IAAIkF,EAASlF,EAAI,GACbmF,EAAYvC,KAAKwC,MACjBpF,EAAI,GAAK,IAAO,EAAK2B,MAAMyC,WAAcpE,EAAI,IAE7CqF,EAAUF,EAAYnF,EAAI,GAC1BsF,IAAaH,EAAYnF,EAAI,IAAI6E,QAAQ,GAE7CG,GAAiBM,EACjBL,EAAkB/E,KAAK,CAACgF,EAAQI,EAAUH,EAAWE,OAEvD,IAAIE,EACF3C,KAAKC,MACuC,KAAzC,EAAKlB,MAAMyC,WAAaY,GAAuBF,OAAOC,SACrD,IACNE,EAAkB/E,KAAK,CAAC,OAAQqF,EAAM,EAAG,IACzCN,EAAkB7C,SAAQ,SAACpC,GACzBA,EAAIE,KACF0C,KAAKC,MACyD,KAA1D7C,EAAI,GAAK,EAAK2B,MAAMyC,WAAc,IAAMU,OAAOC,UAC/C,KAEN/E,EAAIE,KAAK,WAGX,EAAK0B,SAAS,CAAEqD,kBAAmBA,KA1FnC,EAAKtD,MAAQ,CAAEiD,cAAe,GAAIK,kBAAmB,IAJpC,E,gEAQjBO,QAAQC,IAAI,YACZ,IAAK,IAAIxF,EAAI,EAAGA,EAAIa,KAAKP,MAAMkC,KAAK/B,OAAQT,IAAK,CAC/C,IAAIG,EAASU,KAAKP,MAAMkC,KAAKxC,GAC7BI,SAASqE,eAAe,UAAYzE,EAAI,IAAIsC,MAAQnC,EAAO,GAC3DC,SAASqE,eAAe,UAAYzE,EAAI,IAAIsC,MAAQnC,EAAO,GAC3DC,SAASqE,eAAe,SAAWzE,EAAI,IAAIsC,MAAQnC,EAAO,GACtDA,EAAOM,OAAS,IAClBL,SAASqE,eAAe,UAAYzE,EAAI,IAAIsC,MAAQnC,EAAO,IAI/DU,KAAKyD,gB,yCAGYmB,GACbA,IAAc5E,KAAKP,QACrBO,KAAKyD,cACLiB,QAAQC,IAAI,6BACRC,EAAUlF,WAAeM,KAAKP,MAAMC,c,+BAwE1C,OACE,oCACE,yBAAKO,UAAU,gBACb,yBAAKA,UAAU,iBACb,kDACA,kBAAC,EAAD,CAAQoB,UAAWrB,KAAKa,MAAMiD,cAAetD,KAAK,aAEpD,yBAAKD,GAAG,oBAAoBN,UAAU,qBACpC,8CACA,kBAAC,EAAD,CACEoB,UAAWrB,KAAKa,MAAMsD,kBACtB3D,KAAK,uB,GA9GQE,a,qCCGAA,Y,cCoBZmE,EAxBG,SAAC,GAA6E,IAA5EC,EAA2E,EAA3EA,SAAUC,EAAiE,EAAjEA,WAAYC,EAAqD,EAArDA,aAAcC,EAAuC,EAAvCA,kBAAmBC,EAAoB,EAApBA,eAEvE,OACI,yBAAKjF,UAAU,WACX,4BAAQsD,QAASuB,GAAjB,aACA,4BACEvB,QAAS0B,GAEW,SAAnBC,EACG,0BACA,qBAEN,4BACE3B,QAASyB,GADX,SAKA,4BAAQzB,QAASwB,GAAjB,qBC2FGhG,EA5GA,SAAC,GAA4D,IAA1DoG,EAAyD,EAAzDA,cAAeC,EAA0C,EAA1CA,YAAa9F,EAA6B,EAA7BA,OAAQ4F,EAAqB,EAArBA,eAC9CG,EAAc,CAACC,OAAQ,EAAGC,OAAQ,WAExCC,IAAMC,WAAU,WACdpG,MACC,CAAC6F,EAAgB5F,IAEpB,IAAMD,EAAmB,WACvB,IAAIqG,EAASnG,SAASoG,iBAAiB,WACvC,GAAuB,SAAnBT,EACF,IAAK,IAAIvF,EAAI,EAAGA,EAAIL,EAAOM,OAAQD,IACjC+F,EAAO/F,GAAGE,MAAMC,QAAU,SAC1B4F,EAAO/F,GAAGI,UAAW,OAGvB,IAAK,IAAIZ,EAAI,EAAGA,EAAIG,EAAOM,OAAQT,IACjCuG,EAAOvG,GAAGU,MAAMC,QAAU,OAC1B4F,EAAOvG,GAAGY,UAAW,GAK3B,OACE,0BACE6F,OAAO,IACPC,SAAU,SAACC,GACTA,EAAEC,iBACFZ,MAGD7F,EAAOM,OAAS,EACf,yBAAKK,UAAU,UACb,+BACE,+BACE,4BACE,sCACA,sCACA,qCACoB,SAAnBiF,EAA4B,iDAA6B,MAE3D5F,EAAOa,KAAI,SAAC6F,GAAD,OACV,wBAAI/F,UAAS,eAAU+F,EAAMzF,GAAhB,UAA4BD,IAAK0F,EAAMzF,IAClD,4BACE,2BACEA,GAAI,SAAWyF,EAAMzF,GACrBC,KAAK,OACLT,UAAQ,EACRU,YAAY,OACZwF,aAAcD,EAAM5B,UAGxB,4BACE,2BACE7D,GAAI,SAAWyF,EAAMzF,GACrBC,KAAK,SACLT,UAAQ,EACRU,YAAY,KACZwF,aAAcD,EAAME,UAGxB,4BACE,2BACE3F,GAAI,QAAUyF,EAAMzF,GACpBC,KAAK,OACLT,UAAQ,EACRU,YAAY,MACZwF,aAAcD,EAAMG,SAGxB,4BACE,2BACElG,UAAU,SACVJ,MACqB,SAAnBqF,EACI,CAAEpF,QAAS,UACX,CAAEA,QAAS,QAEjBS,GAAI,SAAWyF,EAAMzF,GACrBC,KAAK,OACLT,UAAQ,EACRU,YAAY,KACZwF,aAAcD,EAAMI,oBAGxB,4BACE,4BAAQ7C,QAAS,kBAAM6B,EAAYY,EAAMzF,KACzCV,MAAOwF,GADP,YAOV,mHAEqB,6BAFrB,mFAMA,4BAAQ7E,KAAK,SAASP,UAAU,aAAhC,aAGA,yBAAKM,GAAG,WAER,OC4EKI,EAjLA,SAAC,GAAoB,IAAnB+E,EAAkB,EAAlBA,OAAQlF,EAAU,EAAVA,KAAU,EACH6F,mBAAS,SADN,mBAC1BvG,EAD0B,KACjBwG,EADiB,OAELD,mBAAS,kBAFJ,mBAE1BrF,EAF0B,KAElBuF,EAFkB,KAuJjC,OACE,oCAxCY,SAACb,EAAQlF,EAAMQ,GAC3B,IAAIsC,EAAa,EASjB,MARe,gBAAXtC,EACF0E,EAAOjD,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAElB,MAAQiB,EAAEjB,SAElCiE,EAAOjD,OAETiD,EAAOpE,SAAQ,SAACkF,GACdlD,GAAckD,EAAM/E,SAGpB,yBAAKxB,UAAU,SACb,+BACE,+BACE,4BACE,sCACA,qCACA,sCACA,qCACA,0CACU,gBAATO,EAAyB,wCAAoB,MAE/CkF,EAAOvF,KAAI,SAACqG,EAAOnG,GAAR,OACV,wBAAIC,IAAKD,GACP,4BAAKmG,EAAMpC,QACX,4BAAKoC,EAAM/E,OACX,4BAAK+E,EAAMN,QACX,4BAAKM,EAAML,OACX,4BAAKK,EAAMxE,YACD,gBAATxB,EAAyB,4BAAKgG,EAAMC,QAAe,WAK5D,6CAAmBnD,IAOpBD,CAAMqC,EAAOlF,EAAMQ,GArIP,SAAC0E,GAChB,IAAIrE,EAAY,GAShB,OARAqE,EAAOpE,SAAQ,SAACkF,EAAOnG,GARL,IAACa,EAAUC,EAS3BE,EAAUjC,KAAK,CACboC,MAAOgF,EAAMpC,OACb3C,MAAO+E,EAAM/E,MACbC,OAZeR,EAYU,EAANb,EAZMc,EAYG,GAX5BA,EAAS,IAAGA,EAAS,GAClB,QAAW,IAAMD,GAAY,IAAMC,IAAW,IAAO,mBAe1D,yBAAKlB,UAAU,YACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,SACb,kBAAC,WAAD,CACEA,UAAU,WACV0B,KAAMN,EACNO,MAAO,gBAAGC,EAAH,EAAGA,UAAH,gBAAsBC,KAAKC,MAAMF,EAAUG,YAA3C,MACPC,SAAO,EACPC,cAAe,IACfC,OAAQ,CAAC,GAAI,IACbC,YAAa,CAAC,IAAK,QAIvB,yBAAKnC,UAAU,eACZoB,EAAUlB,KAAI,SAACwB,EAAMtB,GAAP,OACb,yBAAKJ,UAAU,QAAQK,IAAKD,GAC1B,yBACEJ,UAAU,SACVJ,MAAO,CACLwC,gBAAiBV,EAAKD,SAGzBC,EAAKH,aAoGfJ,CAASsE,GACV,yBAAKzF,UAAU,YA3FF,SAACyF,EAAQ5F,EAASkB,GACjC,IAAIuB,EAAU,GACVC,EAAS,GACE,gBAAXxB,EACF0E,EAAOjD,MAAK,SAACC,EAAGC,GAAJ,OAAUA,EAAElB,MAAQiB,EAAEjB,SAElCiE,EAAOjD,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE0B,OAAOsC,cAAc/D,EAAEyB,WAGjDsB,EAAOpE,SAAQ,SAACkF,GACdjE,EAAQnD,KAAKoH,EAAMpC,QACnB5B,EAAOpD,KAAiB,eAAZU,EAA2B0G,EAAMxE,WAAawE,EAAM/E,UAElEe,EAAOpD,KAAK,GACZ,IAAIyB,EAAQ,CACV+B,OAAQL,EACRM,SAAU,CACR,CACEjB,MAAmB,eAAZ9B,EAA2B,aAAe,QACjDuC,gBAAiB,UACjBS,YAAa,UACbC,YAAa,EACbpB,KAAMa,KAIZ,OACE,kBAAC,MAAD,CACEvC,UAAU,MACV+C,OAAQ,IACRrB,KAAMd,EACNoC,QAAS,CACPzB,MAAO,CACL1B,SAAS,EACToD,KACc,eAAZpD,EACI,0BACA,gBAERqD,qBAAqB,EACrBC,OAAQ,CACNtD,SAAS,MAmDZwC,CACCoD,EACA5F,EACAkB,IAGJ,yBAAKf,UAAU,QACb,4BAAQsD,QA/JQ,WACO+C,EAAf,eAAZxG,EAAsC,QAAsB,gBA+JzC,eAAZA,EACG,aACA,oBAEN,4BAAQyD,QAhKK,WAEbgD,EADO,gBAAXvF,EACc,iBACA,iBA8JI,mBAAXA,EACG,mBACA,0BC7DCwC,EA/GM,SAAC,GAAgC,IAA9BlE,EAA6B,EAA7BA,OAAQ4F,EAAqB,EAArBA,eAAqB,EACTmB,mBAAS,IADA,mBAC5CvC,EAD4C,KAC7B6C,EAD6B,OAEDN,mBAAS,IAFR,mBAE5ClC,EAF4C,KAEzByC,EAFyB,OAIfP,mBAAS,GAJM,mBAI5C/C,EAJ4C,KAIhCuD,EAJgC,KAMnDrB,IAAMC,WAAU,WACdhC,MACC,CAACnE,EAAQgE,IAEZ,IAAMG,EAAc,WAClBC,IACA,IAAIC,EAAOpE,SAASuH,cAAc,sBACX,SAAnB5B,GACFrB,IACAF,EAAK9D,MAAMC,QAAU,QAErB6D,EAAK9D,MAAMC,QAAU,QAInB4D,EAAmB,WACvB,IAAIqD,EAAQ,EACRC,EAAO,GAEX1H,EAAOgC,SAAQ,SAAC0E,GACd,IAAIvE,EAAQwF,YAAYjB,EAAME,OAASF,EAAMG,OAAOpC,QAAQ,IAC5DiD,EAAK5H,KAAK,CAAEgF,OAAQ4B,EAAM5B,OAAQ3C,MAAOA,EAAOyE,OAAQF,EAAME,OAASC,MAAOH,EAAMG,QACpFY,GAAStF,KAEXuF,EAAK1F,SAAQ,SAACkF,GACZA,EAAK,WACH1E,KAAKC,MAAuD,KAA/CyE,EAAM/E,MAAQsF,EAAS,IAAM/C,OAAOC,UAAkB,OAGvE0C,EAAiBK,GACjBH,EAAcE,GACdrC,QAAQC,IAAI,kCAGRd,EAAe,WACnB,IAGIqD,EAHAhD,EAAgB,EAChBC,EAAoB,GACpBgD,GAAgB,EAGpB7H,EAAOgC,SAAQ,SAAC0E,GACd,IAAI3B,EAAYvC,KAAKwC,MACjB0B,EAAMI,iBAAmB,IAAO9C,EAAc0C,EAAMG,OAEpD5B,EAAUF,EAAY2B,EAAME,OAC5B1B,EAAWyC,YAAY5C,EAAY2B,EAAMG,OAAOpC,QAAQ,IACxD/B,EACFF,KAAKC,MAAyD,KAAjDyC,EAAWlB,EAAc,IAAMU,OAAOC,UACnD,IAEFC,GAAiBM,EACjB,IAAI4C,EAAM,CACRhD,OAAQ4B,EAAM5B,OACd3C,MAAO+C,EACP0B,OAAQ7B,EACR8B,MAAOH,EAAMG,MACbnE,WAAYA,EACZyE,OAAQlC,GAEVJ,EAAkB/E,KAAKgI,GACU,QAA9BpB,EAAM5B,OAAOiD,gBACdF,GAAgB,EAChBC,EAAIX,OAAS,EACbS,EAAUE,MAGd,IAAI3C,EACF3C,KAAKC,MAAqC,KAA9BuB,EAAaY,GAAuBF,OAAOC,SAAW,IAChEjC,EACAF,KAAKC,MAAqD,KAA7C0C,EAAOnB,EAAc,IAAMU,OAAOC,UAC/C,IACDkD,GACDD,EAAQzF,MAAQyF,EAAQzF,MAAQgD,EAChCyC,EAAQhB,OAASgB,EAAQhB,OAASzB,EAClCyC,EAAQlF,WAAakF,EAAQlF,WAAaA,GAE1CmC,EAAkB/E,KAAK,CACrBgF,OAAQ,OACR3C,MAAOgD,EACPyB,OAAQzB,EACR0B,MAAO,EACPnE,aACAyE,OAAQ,IAKZG,EAAqBzC,GACrBO,QAAQC,IAAI,8BAGd,OACE,yBAAK1E,UAAU,gBACb,yBAAKA,UAAU,iBACb,kDACA,kBAAC,EAAD,CAAQyF,OAAQ5B,EAAetD,KAAK,aAEtC,yBAAKD,GAAG,oBAAoBN,UAAU,qBACpC,8CACA,kBAAC,EAAD,CAAQyF,OAAQvB,EAAmB3D,KAAK,mBCgDjC8G,EArJQ,WAAO,IAAD,EACiBjB,mBAC1CkB,aAAaC,QAAQ,mBAAqB,QAFjB,mBACpBtC,EADoB,KACJuC,EADI,OAK2BpB,mBACpDkB,aAAaC,QAAQ,wBAA0B,SANtB,mBAKpBE,EALoB,KAKCC,EALD,OAWCtB,mBAC1BuB,KAAKC,MAAMN,aAAaC,QAAQ,YAAc,IAZrB,mBAWpBlI,EAXoB,KAWZwI,EAXY,OAiBazB,mBACtCuB,KAAKC,MAAMN,aAAaC,QAAQ,kBAAoB,IAlB3B,mBAiBpBO,EAjBoB,KAiBNC,EAjBM,KAuB3BxC,IAAMC,WAAU,WACd8B,aAAaU,QAAQ,iBAAkB/C,GACvCqC,aAAaU,QAAQ,SAAUL,KAAKM,UAAU5I,IAC9CiI,aAAaU,QAAQ,eAAgBL,KAAKM,UAAUH,IACpDR,aAAaU,QAAQ,sBAAuBP,KAC3C,CAACpI,EAAQ4F,EAAgBwC,EAAqBK,IAEjD,IAkFMI,EAAY,SAAC7I,GACjB0I,EAAgB1I,IAGlB,OACE,oCACE,yBAAKW,UAAU,UACb,yDACA,kBAAC,EAAD,CACE6E,SA/ES,WACfJ,QAAQC,IAAI,eACZ,IACIyD,EAAW,CACb7H,GAFWjB,EAAOM,OAAS,EAAIN,EAAOA,EAAOM,OAAS,GAAGW,GAAK,EAAI,EAGlE6D,OAAQ,GACR8B,OAAQ,GACRC,MAAO,GACPC,iBAAkB,IAEpB0B,EAAU,GAAD,mBAAKxI,GAAL,CAAa8I,MAsEhBrD,WAnEW,WACjB+C,EAAU,CACR,CAAEvH,GAAI,EAAG6D,OAAQ,MAAO8B,OAAQ,IAAKC,MAAO,GAAIC,iBAAkB,IAClE,CAAE7F,GAAI,EAAG6D,OAAQ,OAAQ8B,OAAQ,GAAIC,MAAO,IAAKC,iBAAkB,IACnE,CAAE7F,GAAI,EAAG6D,OAAQ,MAAO8B,OAAQ,IAAKC,MAAO,GAAIC,iBAAkB,IAClE,CAAE7F,GAAI,EAAG6D,OAAQ,OAAQ8B,OAAQ,GAAIC,MAAO,IAAKC,iBAAkB,GACnE,CAAE7F,GAAI,EAAG6D,OAAQ,KAAM8B,OAAQ,GAAIC,MAAO,IAAKC,iBAAkB,IACjE,CAAE7F,GAAI,EAAG6D,OAAQ,MAAO8B,OAAQ,GAAIC,MAAO,IAAKC,iBAAkB,GAClE,CAAE7F,GAAI,EAAG6D,OAAQ,OAAQ8B,OAAQ,IAAKC,MAAO,GAAIC,iBAAkB,IACnE,CAAE7F,GAAI,EAAG6D,OAAQ,KAAM8B,OAAQ,GAAIC,MAAO,GAAIC,iBAAkB,IAChE,CAAE7F,GAAI,EAAG6D,OAAQ,OAAQ8B,OAAQ,GAAIC,MAAO,IAAKC,iBAAkB,KAErE1B,QAAQC,IAAI,2BAwDNK,aAxFa,WACnB8C,EAAU,IACVE,EAAgB,IAChBL,EAAuB,SACvBjD,QAAQC,IAAI,mBAqFNM,kBA9FkB,WACxBwC,EAAqC,SAAnBvC,EAA4B,QAAU,QACxDR,QAAQC,IAAI,uBA6FNO,eAAgBA,IAElB,kBAAC,EAAD,CACEC,cAjDc,WACpB,IAAIO,EAASnG,SAASoG,iBAAiB,UACnCqB,EAAO,GACPqB,EAAwB,EAkB5B,GAjBA3C,EAAOpE,SAAQ,SAACkF,EAAOnG,GACrB,IAAIiI,EAAY9B,EAAMb,iBAAiB,SACnCpF,EAAKF,EACL+D,EAASkE,EAAU,GAAG7G,MACtByE,EAASoC,EAAU,GAAG7G,MACtB0E,EAAQc,WAAWqB,EAAU,GAAG7G,OAAOsC,QAAQ,GAC/CqC,EAAmBa,WAAWqB,EAAU,GAAG7G,OAAOsC,QAAQ,GAC9DiD,EAAK5H,KAAK,CACRmB,GAAIA,EACJ6D,OAAQA,EACR8B,OAAQA,EACRC,MAAOA,EACPC,iBAAkBA,IAEpBiC,GAAyBjC,KAE3B0B,EAAUd,GACa,SAAnB9B,GAA6BmD,EAAwB,IAMvD,OALA9I,SAASuH,cAAc,UAAUyB,UAC/B,gFACFC,YAAW,WACTjJ,SAASuH,cAAc,aAAa2B,WACnC,KAGLN,EAAUnB,GACVW,EAAuB,SAoBjBvC,YA3DY,SAAC7E,GACnBuH,EACExI,EAAOoJ,QAAO,SAACvJ,GACb,OAAOA,EAAEoB,KAAOA,MAGpBmE,QAAQC,IAAR,gBAAqBpE,EAArB,cAsDMjB,OAAQA,EACR4F,eAAgBA,KAGK,SAAxBwC,EACC,kBAAC,EAAD,CAAcpI,OAAQyI,EAAc7C,eAAgBA,IAEpD,yBAAKjF,UAAU,cACb,yCACA,6BACE,yBAAK0I,IAAI,YAAYC,IAAKC,MAC1B,yBAAKF,IAAI,YAAYC,IAAKE,U,OCvIvBC,MARf,WACE,OACE,oCACE,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhK,SAASqE,eAAe,SD0HpB,kBAAmB4F,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrF,QAAQqF,MAAMA,EAAMC,a,mBEzI5BC,EAAOC,QAAU,IAA0B,mD,mBCA3CD,EAAOC,QAAU,IAA0B,+C","file":"static/js/main.41ab7d80.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Inputs extends Component {\r\n  array = (n) => {\r\n    var arr = [];\r\n    for (var i = 1; i <= n; i++) {\r\n      arr.push(i);\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  toggleReallocate = () => {\r\n    var inputs = document.getElementsByClassName(\"toggle\");\r\n    if (this.props.reallocate === \"true\") {\r\n      for (var j = 0; j < inputs.length; j++) {\r\n        inputs[j].style.display = \"inline\";\r\n        inputs[j].required = true;\r\n      }\r\n    } else {\r\n      for (var i = 0; i < inputs.length; i++) {\r\n        inputs[i].style.display = \"none\";\r\n        inputs[i].required = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.toggleReallocate();\r\n  }\r\n  componentDidUpdate() {\r\n    this.toggleReallocate();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"inputs\">\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <th>Ticker</th>\r\n                <th>Shares</th>\r\n                <th>Price</th>\r\n                {this.props.reallocate === \"true\" ? (\r\n                  <th>Target Percentage</th>\r\n                ) : null}\r\n              </tr>\r\n              {this.array(this.props.counter).map((count, index) => (\r\n                <tr className={`input${index}`}  key={index}>\r\n                  <td>\r\n                    <input\r\n                      id={\"ticker\" + count}\r\n                      type=\"text\"\r\n                      required\r\n                      placeholder=\"APPL\"\r\n                    ></input>\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      id={\"shares\" + count}\r\n                      type=\"number\"\r\n                      required\r\n                      placeholder=\"30\"\r\n                    ></input>\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      id={\"price\" + count}\r\n                      type=\"text\"\r\n                      required\r\n                      placeholder=\"150\"\r\n                    ></input>\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className=\"toggle\"\r\n                      id={\"target\" + count}\r\n                      type=\"number\"\r\n                      required\r\n                      placeholder=\"10\"\r\n                    ></input>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Inputs;\r\n","import { PieChart } from \"react-minimal-pie-chart\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport React, { Component } from \"react\";\r\n\r\nclass Charts extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { display: \"percentage\", sortBy: \"numerically\" };\r\n  }\r\n\r\n  changeDisplay = () => {\r\n    this.state.display === \"percentage\"\r\n      ? this.setState({ display: \"value\" })\r\n      : this.setState({ display: \"percentage\" });\r\n  };\r\n\r\n  changeSort = () => {\r\n    this.state.sortBy === \"numerically\"\r\n      ? this.setState({ sortBy: \"alphabetically\" })\r\n      : this.setState({ sortBy: \"numerically\" });\r\n  };\r\n\r\n  selectColor = (colorNum, colors) => {\r\n    if (colors < 1) colors = 1; // defaults to one color - avoid divide by zero\r\n    return \"hsl(\" + ((120 + colorNum * (360 / colors)) % 360) + \",100%,70%)\";\r\n  };\r\n  // https://www.npmjs.com/package/react-minimal-pie-chart\r\n  pieChart = (arr) => {\r\n    var dataArray = [];\r\n    // var colorArray = randomColor({\r\n    //   count: arr.length,\r\n    //   luminosity: \"light\",\r\n    //   hue: \"#213458\",\r\n    // });\r\n    arr.forEach((arr, index) => {\r\n      arr.splice(-1, 1, this.selectColor(index, 20));\r\n      dataArray.push({\r\n        title: arr[0],\r\n        value: arr[arr.length - 2],\r\n        color: this.selectColor(index, 20),\r\n      });\r\n    });\r\n\r\n    return (\r\n      <div className=\"pieChart\">\r\n        <div className=\"pieChartContent\">\r\n          <div className=\"chart\">\r\n            <PieChart\r\n              className=\"piechart\"\r\n              data={dataArray}\r\n              label={({ dataEntry }) => `${Math.round(dataEntry.percentage)}%`}\r\n              animate\r\n              segmentsShift={0.75}\r\n              center={[55, 55]}\r\n              viewBoxSize={[110, 110]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"chartColors\">\r\n            {arr.map((arr, index) => (\r\n              <div className=\"color\" key={index}>\r\n                <div\r\n                  className=\"square\"\r\n                  style={{\r\n                    backgroundColor: arr[arr.length - 1],\r\n                  }}\r\n                ></div>\r\n                {arr[0]}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // https://www.educative.io/edpresso/how-to-use-chartjs-to-create-charts-in-react\r\n  barChart = (arr, display, sortBy) => {\r\n    var tickers = [];\r\n    var values = [];\r\n    if (sortBy === \"numerically\") {\r\n      arr.sort((a, b) => b[1] - a[1]);\r\n    } else {\r\n      arr.sort();\r\n    }\r\n\r\n    arr.forEach((arr) => {\r\n      tickers.push(arr[0]);\r\n      values.push(arr[display === \"percentage\" ? arr.length - 2 : 1]);\r\n    });\r\n    values.push(0);\r\n    var state = {\r\n      labels: tickers,\r\n      datasets: [\r\n        {\r\n          label: display === \"percentage\" ? \"Percentage\" : \"Value\",\r\n          backgroundColor: \"#1F77AC\",\r\n          borderColor: \"#213458\",\r\n          borderWidth: 3,\r\n          data: values,\r\n        },\r\n      ],\r\n    };\r\n    return (\r\n      <Bar\r\n        className=\"bar\"\r\n        height={350}\r\n        data={state}\r\n        options={{\r\n          title: {\r\n            display: true,\r\n            text:\r\n              display === \"percentage\"\r\n                ? \"Percentage of Portfolio\"\r\n                : \"Asset Values\",\r\n          },\r\n          maintainAspectRatio: false,\r\n          legend: {\r\n            display: false,\r\n          },\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  table = (arr, type, sortBy) => {\r\n    var totalValue = 0;\r\n    if (sortBy === \"numerically\") {\r\n      arr.sort((a, b) => b[1] - a[1]);\r\n    } else {\r\n      arr.sort();\r\n    }\r\n    arr.forEach((arr) => {\r\n      totalValue += arr[1];\r\n    });\r\n    return (\r\n      <div className=\"table\">\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <th>Ticker</th>\r\n              <th>Value</th>\r\n              <th>Shares</th>\r\n              {type === \"reallocated\" ? <th>Buy/Sell</th> : null}\r\n              <th>Percentage</th>\r\n            </tr>\r\n            {arr.map((arr, index) => (\r\n              <tr key={index}>\r\n                <td>{arr[0]}</td>\r\n                <td>{arr[1]}</td>\r\n                <td>{arr[2]}</td>\r\n                <td>{arr[3]}</td>\r\n                {type === \"reallocated\" ? <td>{arr[4]}</td> : null}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <h3>Total Value = {totalValue}</h3>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {this.table(this.props.dataArray, this.props.type, this.state.sortBy)}\r\n        {this.pieChart(this.props.dataArray)}\r\n        <div className=\"barChart\">\r\n          {this.barChart(\r\n            this.props.dataArray,\r\n            this.state.display,\r\n            this.state.sortBy\r\n          )}\r\n        </div>\r\n        <div className=\"view\">\r\n          <button onClick={this.changeDisplay}>\r\n            {this.state.display === \"percentage\"\r\n              ? \"View Value\"\r\n              : \"View Percentages\"}\r\n          </button>\r\n          <button onClick={this.changeSort}>\r\n            {this.state.sortBy === \"alphabetically\"\r\n              ? \"Sort Numerically\"\r\n              : \"Sort Alphabetically\"}\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default Charts;\r\n","import React, { Component } from \"react\";\r\nimport Charts from \"./charts.js\";\r\n\r\nclass Calculations extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // current [ticker,value,shares,percentage, color]\r\n    // reallocated [ticker, value, shares, buysell, percentage, color]\r\n    this.state = { currentAssets: [], reallocatedAssets: [] };\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"mounting\");\r\n    for (var i = 0; i < this.props.data.length; i++) {\r\n      var inputs = this.props.data[i];\r\n      document.getElementById(\"ticker\" + (i + 1)).value = inputs[0];\r\n      document.getElementById(\"shares\" + (i + 1)).value = inputs[1];\r\n      document.getElementById(\"price\" + (i + 1)).value = inputs[2];\r\n      if (inputs.length > 3) {\r\n        document.getElementById(\"target\" + (i + 1)).value = inputs[3];\r\n      }\r\n    }\r\n\r\n    this.recalculate();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps !== this.props) {\r\n      this.recalculate();\r\n      console.log(\"recalculated in didupdate\");\r\n      if (prevProps.reallocate !== this.props.reallocate) {\r\n      }\r\n    }\r\n  }\r\n  recalculate = async () => {\r\n    await this.calculateCurrent();\r\n    var elem = document.getElementById(\"reallocatedAssets\");\r\n    if (this.props.reallocate === \"true\") {\r\n      this.calculateNew();\r\n      if (this.props.data[0].length >= 4) {\r\n        elem.style.display = \"grid\";\r\n      }\r\n    } else {\r\n      elem.style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  calculateCurrent = () => {\r\n    var inputs = this.props.data;\r\n    var totalValue = 0;\r\n    var currentAssets = [];\r\n\r\n    inputs.forEach((arr) => {\r\n      var value = +(arr[1] * arr[2]).toFixed(2);\r\n      currentAssets.push([arr[0], value, arr[1]]);\r\n      totalValue += arr[1] * arr[2];\r\n    });\r\n    currentAssets.forEach((arr) => {\r\n      arr.push(\r\n        Math.round(((arr[1] / totalValue) * 100 + Number.EPSILON) * 100) / 100\r\n      );\r\n      arr.push(\"none\");\r\n    });\r\n\r\n    this.setState({ currentAssets: currentAssets });\r\n    this.setState({ totalValue: totalValue });\r\n  };\r\n\r\n  calculateNew = () => {\r\n    var inputs = this.props.data;\r\n    var newTotalValue = 0;\r\n    var reallocatedAssets = [];\r\n\r\n    inputs.forEach((arr) => {\r\n      var ticker = arr[0];\r\n      var newShares = Math.floor(\r\n        ((arr[3] / 100) * this.state.totalValue) / arr[2]\r\n      );\r\n      var buySell = newShares - arr[1];\r\n      var newValue = +(newShares * arr[2]).toFixed(2);\r\n\r\n      newTotalValue += newValue;\r\n      reallocatedAssets.push([ticker, newValue, newShares, buySell]);\r\n    });\r\n    var cash =\r\n      Math.round(\r\n        (this.state.totalValue - newTotalValue) * 100 + Number.EPSILON\r\n      ) / 100;\r\n    reallocatedAssets.push([\"CASH\", cash, 0, 0]);\r\n    reallocatedAssets.forEach((arr) => {\r\n      arr.push(\r\n        Math.round(\r\n          ((arr[1] / this.state.totalValue) * 100 + Number.EPSILON) * 100\r\n        ) / 100\r\n      );\r\n      arr.push(\"none\");\r\n    });\r\n\r\n    this.setState({ reallocatedAssets: reallocatedAssets });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"calculations\">\r\n          <div className=\"currentAssets\">\r\n            <h1>Current Allocation</h1>\r\n            <Charts dataArray={this.state.currentAssets} type=\"current\" />\r\n          </div>\r\n          <div id=\"reallocatedAssets\" className=\"reallocatedAssets\">\r\n            <h1>New Allocation</h1>\r\n            <Charts\r\n              dataArray={this.state.reallocatedAssets}\r\n              type=\"reallocated\"\r\n            />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculations;\r\n","import React, { Component } from \"react\";\r\nimport Inputs from \"./inputs.js\";\r\nimport Calculations from \"./calculations.js\";\r\nimport currentAllocationDemo from \"../../images/currentAllocationDemo.png\";\r\nimport newAllocationDemo from \"../../images/newAllocationDemo.png\";\r\n\r\nclass AssetManager extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {};\r\n    if (localStorage.getItem(\"counter\")) {\r\n      this.state.counter = parseInt(localStorage.getItem(\"counter\"));\r\n    } else {\r\n      this.state.counter = 1;\r\n      localStorage.setItem(\"counter\", 1);\r\n    }\r\n    if (localStorage.getItem(\"reallocate\")) {\r\n      this.state.reallocate = localStorage.getItem(\"reallocate\");\r\n    } else {\r\n      this.state.reallocate = \"true\";\r\n      localStorage.setItem(\"reallocate\", \"true\");\r\n    }\r\n    if (localStorage.getItem(\"calculations\")) {\r\n      this.state.calculations = JSON.parse(\r\n        localStorage.getItem(\"calculations\")\r\n      );\r\n    } else {\r\n      this.state.calculations = [];\r\n    }\r\n    //  Test 1\r\n    // // ---------------------------\r\n    // this.state.counter = 3;\r\n    // this.state.reallocate = \"true\";\r\n    // this.state.calculations = [\r\n    //   [\"APPL\", 30, 150, 20],\r\n    //   [\"AMD\", 100, 75, 20],\r\n    //   [\"VFV\", 130, 70, 60],\r\n    // ];\r\n    // ----------------------------\r\n    // Expected Outcome = [AMD, 4200, 56shares, sell44, 19.91% ],\r\n    //                    [APPL, 4200,28shares,sell2,19.91%],\r\n    //                    [VFV, 12600, 180shares, buy50, 59.7%],\r\n    //                    [CASH, 100]\r\n    // Test 2\r\n    // this.state.counter = 9;\r\n    // this.state.reallocate = \"true\";\r\n    // this.state.calculations = [\r\n    //   [\"APPL\", 30, 150, 10],\r\n    //   [\"AMD\", 100, 75, 10],\r\n    //   [\"VFV\", 130, 70, 30],\r\n    //   [\"GOOG\", 10, 400, 5],\r\n    //   [\"FB\", 20, 250, 10],\r\n    //   [\"BTC\", 40, 250, 5],\r\n    //   [\"VGRO\", 130, 20, 15],\r\n    //   [\"TD\", 40, 80, 10],\r\n    //   [\"BYND\", 30, 200, 5],\r\n    // ];\r\n  }\r\n\r\n  addAsset = () => {\r\n    localStorage.setItem(\r\n      \"counter\",\r\n      parseInt(localStorage.getItem(\"counter\")) + 1\r\n    );\r\n    this.setState({ counter: parseInt(localStorage.getItem(\"counter\")) });\r\n  };\r\n\r\n  removeAsset = () => {\r\n    if (this.state.counter > 1) {\r\n      localStorage.setItem(\r\n        \"counter\",\r\n        parseInt(localStorage.getItem(\"counter\")) - 1\r\n      );\r\n      this.setState({ counter: localStorage.getItem(\"counter\") });\r\n    }\r\n  };\r\n\r\n  collectInputs = () => {\r\n    var assets = document.getElementsByClassName(\"input\");\r\n    var calcs = [];\r\n    var targetPercentageTotal = 0;\r\n    for (var i = 0; i < assets.length; i++) {\r\n      var loops;\r\n      var arr = [];\r\n      var elem = assets[i].getElementsByTagName(\"input\");\r\n      if (this.state.reallocate === \"true\") {\r\n        loops = 4;\r\n        targetPercentageTotal += parseFloat(elem[3].value).toFixed(2);\r\n      } else {\r\n        loops = 3;\r\n      }\r\n      if (targetPercentageTotal > 100) {\r\n        document.getElementById(\"error\").innerHTML =\r\n          \"Sum of Target Percentages must not exceed 100%\";\r\n        return false;\r\n      }\r\n      for (var j = 0; j < loops; j++) {\r\n        var item = elem[j].value;\r\n        if (typeof item === \"number\") {\r\n          arr.push(Math.round(((item * 100 + Number.EPSILON) * 100) / 100));\r\n        } else {\r\n          arr.push(item);\r\n        }\r\n      }\r\n      calcs.push(arr);\r\n    }\r\n\r\n    calcs.sort();\r\n    this.setState({ calculations: calcs });\r\n    localStorage.setItem(\"calculations\", JSON.stringify(calcs));\r\n    console.log(calcs);\r\n    console.log(\"submitted\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"assets\">\r\n            <h1>Portfolio Allocation Tool</h1>\r\n          <div className=\"buttons\">\r\n            <button onClick={this.addAsset}>Add Asset</button>\r\n            <button onClick={this.removeAsset}>Remove Last Asset</button>\r\n            <button\r\n              onClick={() => {\r\n                localStorage.setItem(\r\n                  \"reallocate\",\r\n                  localStorage.getItem(\"reallocate\") === \"true\"\r\n                    ? \"false\"\r\n                    : \"true\"\r\n                );\r\n                this.setState({\r\n                  reallocate: localStorage.getItem(\"reallocate\"),\r\n                });\r\n              }}\r\n            >\r\n              {this.state.reallocate === \"true\"\r\n                ? \"Current Allocation Only\"\r\n                : \"Reallocate Assets\"}\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                localStorage.clear();\r\n                window.location.reload();\r\n              }}\r\n            >\r\n              Clear\r\n            </button>\r\n          </div>\r\n          <form\r\n            action=\"#\"\r\n            onSubmit={() => {\r\n              this.collectInputs();\r\n            }}\r\n          >\r\n            <Inputs\r\n              counter={this.state.counter}\r\n              reallocate={this.state.reallocate}\r\n            />\r\n            <h4>\r\n              Note: Sum of Target Percentage under 100 will allocate remaining\r\n              percentage to cash\r\n            </h4>\r\n            <button type=\"submit\" className=\"calculate\">\r\n              Calculate\r\n            </button>\r\n            <div id=\"error\"></div>\r\n          </form>\r\n        </div>\r\n        {this.state.calculations.length >= 1 ? (\r\n          <Calculations\r\n            data={this.state.calculations}\r\n            reallocate={this.state.reallocate}\r\n          />\r\n        ) : (\r\n          <div className=\"demoImages\">\r\n            <h2>Demo View</h2>\r\n            <div>\r\n              <img alt=\"demoImage\" src={currentAllocationDemo}></img>\r\n              <img alt=\"demoImage\" src={newAllocationDemo}></img>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AssetManager;\r\n","import React from 'react';\r\n\r\nconst ButtonBar = ({addAsset, testValues, clearHandler, reallocateHandler, reallocateMode}) => {\r\n\r\n    return (\r\n        <div className=\"buttons\">\r\n            <button onClick={addAsset}>Add Asset</button>\r\n            <button\r\n              onClick={reallocateHandler}\r\n            >\r\n              {reallocateMode === \"true\"\r\n                ? \"Current Allocation Only\"\r\n                : \"Reallocate Assets\"}\r\n            </button>\r\n            <button\r\n              onClick={clearHandler}\r\n            >\r\n              Clear\r\n            </button>\r\n            <button onClick={testValues}>\r\n              Use Test Values\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ButtonBar;","import React from \"react\";\r\n\r\nconst Inputs = ({ collectInputs, deleteInput, inputs, reallocateMode }) => {\r\n  const deleteStyle = {margin: 0, cursor: \"pointer\"};\r\n\r\n  React.useEffect(() => {\r\n    toggleReallocate();\r\n  }, [reallocateMode, inputs]);\r\n\r\n  const toggleReallocate = () => {\r\n    let assets = document.querySelectorAll(\".toggle\");\r\n    if (reallocateMode === \"true\") {\r\n      for (var j = 0; j < inputs.length; j++) {\r\n        assets[j].style.display = \"inline\";\r\n        assets[j].required = true;\r\n      }\r\n    } else {\r\n      for (var i = 0; i < inputs.length; i++) {\r\n        assets[i].style.display = \"none\";\r\n        assets[i].required = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form\r\n      action=\"#\"\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        collectInputs();\r\n      }}\r\n    >\r\n      {inputs.length > 0 ? (\r\n        <div className=\"inputs\">\r\n          <table>\r\n            <tbody>\r\n              <tr>\r\n                <th>Ticker</th>\r\n                <th>Shares</th>\r\n                <th>Price</th>\r\n                {reallocateMode === \"true\" ? <th>Target Percentage</th> : null}\r\n              </tr>\r\n              {inputs.map((input) => (\r\n                <tr className={`asset${input.id} input`} key={input.id}>\r\n                  <td>\r\n                    <input\r\n                      id={\"ticker\" + input.id}\r\n                      type=\"text\"\r\n                      required\r\n                      placeholder=\"APPL\"\r\n                      defaultValue={input.ticker}\r\n                    ></input>\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      id={\"shares\" + input.id}\r\n                      type=\"number\"\r\n                      required\r\n                      placeholder=\"30\"\r\n                      defaultValue={input.shares}\r\n                    ></input>\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      id={\"price\" + input.id}\r\n                      type=\"text\"\r\n                      required\r\n                      placeholder=\"150\"\r\n                      defaultValue={input.price}\r\n                    ></input>\r\n                  </td>\r\n                  <td>\r\n                    <input\r\n                      className=\"toggle\"\r\n                      style={\r\n                        reallocateMode === \"true\"\r\n                          ? { display: \"inline\" }\r\n                          : { display: \"none\" }\r\n                      }\r\n                      id={\"target\" + input.id}\r\n                      type=\"text\"\r\n                      required\r\n                      placeholder=\"10\"\r\n                      defaultValue={input.targetPercentage}\r\n                    ></input>\r\n                  </td>\r\n                  <td>\r\n                    <button onClick={() => deleteInput(input.id)}\r\n                    style={deleteStyle}>X</button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <h4>\r\n            Note: Sum of Target Percentage under 100 will allocate remaining\r\n            percentage to cash <br>\r\n            </br>\r\n            If cash included in assets name Ticker = \"CASH\", Price = 1, and Shares = amount\r\n          </h4>\r\n          <button type=\"submit\" className=\"calculate\">\r\n            Calculate\r\n          </button>\r\n          <div id=\"error\"></div>\r\n        </div>\r\n      ) : null}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Inputs;\r\n","import React, { useState} from \"react\";\r\nimport { PieChart } from \"react-minimal-pie-chart\";\r\nimport { Bar } from \"react-chartjs-2\";\r\n\r\nconst Charts = ({assets, type}) => {\r\n  const [display, setDisplay] = useState(\"value\");\r\n  const [sortBy, setSortBy] = useState(\"alphabetically\");\r\n\r\n  const changeDisplay = () => {\r\n    display === \"percentage\" ? setDisplay(\"value\") : setDisplay(\"percentage\");\r\n  };\r\n\r\n  const changeSort = () => {\r\n    sortBy === \"numerically\"\r\n      ? setSortBy(\"alphabetically\")\r\n      : setSortBy(\"numerically\");\r\n  };\r\n\r\n  const selectColor = (colorNum, colors) => {\r\n    if (colors < 1) colors = 1; // defaults to one color - avoid divide by zero\r\n    return \"hsl(\" + ((120 + colorNum * (360 / colors)) % 360) + \",100%,70%)\";\r\n  };\r\n\r\n  // https://www.npmjs.com/package/react-minimal-pie-chart\r\n  const pieChart = (assets) => {\r\n    let dataArray = [];\r\n    assets.forEach((asset, index) => {\r\n      dataArray.push({\r\n        title: asset.ticker,\r\n        value: asset.value,\r\n        color: selectColor(index*2, 20),\r\n      });\r\n    });\r\n\r\n    return (\r\n      <div className=\"pieChart\">\r\n        <div className=\"pieChartContent\">\r\n          <div className=\"chart\">\r\n            <PieChart\r\n              className=\"piechart\"\r\n              data={dataArray}\r\n              label={({ dataEntry }) => `${Math.round(dataEntry.percentage)}%`}\r\n              animate\r\n              segmentsShift={0.75}\r\n              center={[55, 55]}\r\n              viewBoxSize={[110, 110]}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"chartColors\">\r\n            {dataArray.map((data, index) => (\r\n              <div className=\"color\" key={index}>\r\n                <div\r\n                  className=\"square\"\r\n                  style={{\r\n                    backgroundColor: data.color\r\n                  }}\r\n                ></div>\r\n                {data.title}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // https://www.educative.io/edpresso/how-to-use-chartjs-to-create-charts-in-react\r\n  const barChart = (assets, display, sortBy) => {\r\n    let tickers = [];\r\n    let values = [];\r\n    if (sortBy === \"numerically\") {\r\n      assets.sort((a, b) => b.value - a.value);\r\n    } else {\r\n      assets.sort((a, b) => a.ticker.localeCompare(b.ticker));\r\n    }\r\n\r\n    assets.forEach((asset) => {\r\n      tickers.push(asset.ticker);\r\n      values.push(display === \"percentage\" ? asset.percentage : asset.value);\r\n    });\r\n    values.push(0);\r\n    let state = {\r\n      labels: tickers,\r\n      datasets: [\r\n        {\r\n          label: display === \"percentage\" ? \"Percentage\" : \"Value\",\r\n          backgroundColor: \"#1F77AC\",\r\n          borderColor: \"#213458\",\r\n          borderWidth: 3,\r\n          data: values,\r\n        },\r\n      ],\r\n    };\r\n    return (\r\n      <Bar\r\n        className=\"bar\"\r\n        height={350}\r\n        data={state}\r\n        options={{\r\n          title: {\r\n            display: true,\r\n            text:\r\n              display === \"percentage\"\r\n                ? \"Percentage of Portfolio\"\r\n                : \"Asset Values\",\r\n          },\r\n          maintainAspectRatio: false,\r\n          legend: {\r\n            display: false,\r\n          },\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  const table = (assets, type, sortBy) => {\r\n    let totalValue = 0;\r\n    if (sortBy === \"numerically\") {\r\n      assets.sort((a, b) => b.value - a.value);\r\n    } else {\r\n      assets.sort();\r\n    }\r\n    assets.forEach((asset) => {\r\n      totalValue += asset.value;\r\n    });\r\n    return (\r\n      <div className=\"table\">\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <th>Ticker</th>\r\n              <th>Value</th>\r\n              <th>Shares</th>\r\n              <th>Price</th>\r\n              <th>Percentage</th>\r\n              {type === \"reallocated\" ? <th>Buy/Sell</th> : null}\r\n            </tr>\r\n            {assets.map((asset, index) => (\r\n              <tr key={index}>\r\n                <td>{asset.ticker}</td>\r\n                <td>{asset.value}</td>\r\n                <td>{asset.shares}</td>\r\n                <td>{asset.price}</td>\r\n                <td>{asset.percentage}</td>\r\n                {type === \"reallocated\" ? <td>{asset.change}</td> : null}\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <h3>Total Value = {totalValue}</h3>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {table(assets,type, sortBy)}\r\n      {pieChart(assets)}\r\n      <div className=\"barChart\">\r\n        {barChart(\r\n          assets,\r\n          display,\r\n          sortBy\r\n        )}\r\n      </div>\r\n      <div className=\"view\">\r\n        <button onClick={changeDisplay}>\r\n          {display === \"percentage\"\r\n            ? \"View Value\"\r\n            : \"View Percentages\"}\r\n        </button>\r\n        <button onClick={changeSort}>\r\n          {sortBy === \"alphabetically\"\r\n            ? \"Sort Numerically\"\r\n            : \"Sort Alphabetically\"}\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Charts;","import React, { useState } from \"react\";\r\nimport Charts from \"./ChartsFn.js\";\r\n\r\nconst Calculations = ({ inputs, reallocateMode }) => {\r\n  const [currentAssets, setCurrentAssets] = useState([]);\r\n  const [reallocatedAssets, setReallocatedAssets] = useState([]);\r\n\r\n  const [totalValue, setTotalValue] = useState(0);\r\n\r\n  React.useEffect(() => {\r\n    recalculate();\r\n  }, [inputs, totalValue]);\r\n\r\n  const recalculate = () => {\r\n    calculateCurrent();\r\n    let elem = document.querySelector(\"#reallocatedAssets\");\r\n    if (reallocateMode === \"true\") {\r\n      calculateNew();\r\n      elem.style.display = \"grid\";\r\n    } else {\r\n      elem.style.display = \"none\";\r\n    }\r\n  };\r\n\r\n  const calculateCurrent = () => {\r\n    let total = 0;\r\n    let temp = [];\r\n\r\n    inputs.forEach((input) => {\r\n      let value = parseFloat((input.shares * input.price).toFixed(2));\r\n      temp.push({ ticker: input.ticker, value: value, shares: input.shares , price: input.price});\r\n      total += value;\r\n    });\r\n    temp.forEach((asset) => {\r\n      asset[\"percentage\"] =\r\n        Math.round(((asset.value / total) * 100 + Number.EPSILON) * 100) / 100;\r\n    });\r\n\r\n    setCurrentAssets(temp);\r\n    setTotalValue(total);\r\n    console.log(\"current allocation calculated\");\r\n  };\r\n\r\n  const calculateNew = () => {\r\n    let newTotalValue = 0;\r\n    let reallocatedAssets = [];\r\n    let cashInCurrent = false;\r\n    let cashObj;\r\n\r\n    inputs.forEach((input) => {\r\n      let newShares = Math.floor(\r\n        ((input.targetPercentage / 100) * totalValue) / input.price\r\n      );\r\n      let buySell = newShares - input.shares;\r\n      let newValue = parseFloat((newShares * input.price).toFixed(2));\r\n      let percentage =\r\n        Math.round(((newValue / totalValue) * 100 + Number.EPSILON) * 100) /\r\n        100;\r\n\r\n      newTotalValue += newValue;\r\n      let obj = {\r\n        ticker: input.ticker,\r\n        value: newValue,\r\n        shares: newShares,\r\n        price: input.price,\r\n        percentage: percentage,\r\n        change: buySell,\r\n      };\r\n      reallocatedAssets.push(obj);\r\n      if(input.ticker.toLowerCase() == \"cash\") {\r\n        cashInCurrent = true;\r\n        obj.change = 0;\r\n        cashObj = obj;\r\n      }\r\n    });\r\n    let cash =\r\n      Math.round((totalValue - newTotalValue) * 100 + Number.EPSILON) / 100;\r\n    let percentage = \r\n        Math.round(((cash / totalValue) * 100 + Number.EPSILON) * 100) /\r\n        100;\r\n    if(cashInCurrent) {\r\n      cashObj.value = cashObj.value + cash;\r\n      cashObj.shares = cashObj.shares + cash;\r\n      cashObj.percentage = cashObj.percentage + percentage;\r\n    } else {\r\n      reallocatedAssets.push({\r\n        ticker: \"CASH\",\r\n        value: cash,\r\n        shares: cash,\r\n        price: 1,\r\n        percentage,\r\n        change: 0,\r\n    });\r\n    }\r\n    \r\n\r\n    setReallocatedAssets(reallocatedAssets); \r\n    console.log(\"new allocation calculated\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculations\">\r\n      <div className=\"currentAssets\">\r\n        <h1>Current Allocation</h1>\r\n        <Charts assets={currentAssets} type=\"current\" />\r\n      </div>\r\n      <div id=\"reallocatedAssets\" className=\"reallocatedAssets\">\r\n        <h1>New Allocation</h1>\r\n        <Charts assets={reallocatedAssets} type=\"reallocated\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calculations;\r\n","import React, { useState } from \"react\";\r\nimport ButtonBar from \"./ButtonBarFn.js\";\r\nimport Inputs from \"./InputsFn.js\";\r\nimport Calculations from \"./CalculationsFn.js\";\r\nimport currentAllocationDemo from \"../images/currentAllocationDemo.png\";\r\nimport newAllocationDemo from \"../images/newAllocationDemo.png\";\r\n\r\nconst AssetManagerFn = () => {\r\n  const [reallocateMode, setReallocateMode] = useState(\r\n    localStorage.getItem(\"reallocateMode\") || \"true\"\r\n  );\r\n\r\n  const [displayCalculations, setDisplayCalculations] = useState(\r\n    localStorage.getItem(\"displayCalculations\") || \"false\"\r\n  );\r\n\r\n  // Each item in the inputs array will be an map containing\r\n  // {id, ticker, shares, price, target percentage}\r\n  const [inputs, setInputs] = useState(\r\n    JSON.parse(localStorage.getItem(\"inputs\")) || []\r\n  );\r\n\r\n  // Each item in the calculations array will be an map containing\r\n  // {ticker, value, shares, change, targetPercentage}\r\n  const [calculations, setCalculations] = useState(\r\n    JSON.parse(localStorage.getItem(\"calculations\")) || []\r\n  );\r\n\r\n  // Anytime something changes we save everything to local storage\r\n  // All the localstorage setting done here\r\n  React.useEffect(() => {\r\n    localStorage.setItem(\"reallocateMode\", reallocateMode);\r\n    localStorage.setItem(\"inputs\", JSON.stringify(inputs));\r\n    localStorage.setItem(\"calculations\", JSON.stringify(calculations));\r\n    localStorage.setItem(\"displayCalculations\", displayCalculations);\r\n  }, [inputs, reallocateMode, displayCalculations, calculations]);\r\n\r\n  const reallocateHandler = () => {\r\n    setReallocateMode(reallocateMode === \"true\" ? \"false\" : \"true\");\r\n    console.log(\"reallocate Handled\");\r\n  };\r\n\r\n  const clearHandler = () => {\r\n    setInputs([]);\r\n    setCalculations([]);\r\n    setDisplayCalculations(\"false\");\r\n    console.log(\"Assets Cleared\");\r\n  };\r\n\r\n  const addAsset = () => {\r\n    console.log(\"added asset\");\r\n    let nextId = inputs.length > 0 ? inputs[inputs.length - 1].id + 1 : 0;\r\n    let newAsset = {\r\n      id: nextId,\r\n      ticker: \"\",\r\n      shares: \"\",\r\n      price: \"\",\r\n      targetPercentage: \"\",\r\n    };\r\n    setInputs([...inputs, newAsset]);\r\n  };\r\n\r\n  const testValues = () => {\r\n    setInputs([\r\n      { id: 0, ticker: \"AMD\", shares: 100, price: 75, targetPercentage: 10 },\r\n      { id: 1, ticker: \"APPL\", shares: 30, price: 150, targetPercentage: 10 },\r\n      { id: 2, ticker: \"VFV\", shares: 130, price: 70, targetPercentage: 30 },\r\n      { id: 3, ticker: \"GOOG\", shares: 10, price: 400, targetPercentage: 5 },\r\n      { id: 4, ticker: \"FB\", shares: 20, price: 250, targetPercentage: 10 },\r\n      { id: 5, ticker: \"BTC\", shares: 40, price: 250, targetPercentage: 5 },\r\n      { id: 6, ticker: \"VGRO\", shares: 130, price: 20, targetPercentage: 15 },\r\n      { id: 7, ticker: \"TD\", shares: 40, price: 80, targetPercentage: 10 },\r\n      { id: 8, ticker: \"BYND\", shares: 30, price: 200, targetPercentage: 5 },\r\n    ]);\r\n    console.log(\"Test values being used\");\r\n  };\r\n\r\n  const deleteInput = (id) => {\r\n    setInputs(\r\n      inputs.filter((i) => {\r\n        return i.id !== id;\r\n      })\r\n    );\r\n    console.log(`input ${id} deleted`);\r\n  };\r\n\r\n  const collectInputs = () => {\r\n    let assets = document.querySelectorAll(\".input\");\r\n    let temp = [];\r\n    let targetPercentageTotal = 0;\r\n    assets.forEach((asset, index) => {\r\n      let inputList = asset.querySelectorAll(\"input\");\r\n      let id = index;\r\n      let ticker = inputList[0].value;\r\n      let shares = inputList[1].value;\r\n      let price = parseFloat(inputList[2].value).toFixed(2);\r\n      let targetPercentage = parseFloat(inputList[3].value).toFixed(2);\r\n      temp.push({\r\n        id: id,\r\n        ticker: ticker,\r\n        shares: shares,\r\n        price: price,\r\n        targetPercentage: targetPercentage,\r\n      });\r\n      targetPercentageTotal += targetPercentage;\r\n    });\r\n    setInputs(temp);\r\n    if (reallocateMode === \"true\" && targetPercentageTotal > 100) {\r\n      document.querySelector(\"#error\").innerHTML =\r\n        '<h2 class=\"errormsg\">Sum of Target Percentages must not exceed 100%</h2>';\r\n      setTimeout(() => {\r\n        document.querySelector(\".errormsg\").remove();\r\n      }, 3000);\r\n      return;\r\n    }\r\n    calculate(temp);\r\n    setDisplayCalculations(\"true\");\r\n  };\r\n\r\n  const calculate = (inputs) => {\r\n    setCalculations(inputs);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"assets\">\r\n        <h1>Portfolio Allocation Tool</h1>\r\n        <ButtonBar\r\n          addAsset={addAsset}\r\n          testValues={testValues}\r\n          clearHandler={clearHandler}\r\n          reallocateHandler={reallocateHandler}\r\n          reallocateMode={reallocateMode}\r\n        />\r\n        <Inputs\r\n          collectInputs={collectInputs}\r\n          deleteInput={deleteInput}\r\n          inputs={inputs}\r\n          reallocateMode={reallocateMode}\r\n        />\r\n      </div>\r\n      {displayCalculations === \"true\" ? (\r\n        <Calculations inputs={calculations} reallocateMode={reallocateMode} />\r\n      ) : (\r\n        <div className=\"demoImages\">\r\n          <h2>Demo View</h2>\r\n          <div>\r\n            <img alt=\"demoImage\" src={currentAllocationDemo}></img>\r\n            <img alt=\"demoImage\" src={newAllocationDemo}></img>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AssetManagerFn;\r\n","import React from \"react\";\r\nimport AssetManager from \"./components/old_class_components/assetManager.js\";\r\nimport AssetManagerFn from \"./components/assetManagerFn.js\";\r\nimport \"./style.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <AssetManagerFn />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/currentAllocationDemo.cebaf131.png\";","module.exports = __webpack_public_path__ + \"static/media/newAllocationDemo.b142bd2b.png\";"],"sourceRoot":""}