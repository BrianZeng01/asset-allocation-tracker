{"version":3,"sources":["components/inputs.js","components/charts.js","components/calculations.js","components/assetManager.js","App.js","serviceWorker.js","index.js"],"names":["Inputs","array","n","arr","i","push","toggleReallocate","inputs","document","getElementsByClassName","props","reallocate","j","length","style","display","required","this","className","counter","map","count","index","key","id","htmlFor","type","Component","Charts","changeDisplay","state","setState","console","log","pieChart","dataArray","colorArray","randomColor","luminosity","hue","forEach","splice","title","value","color","data","label","dataEntry","Math","round","percentage","animate","segmentsShift","center","viewBoxSize","backgroundColor","barChart","tickers","values","labels","datasets","borderColor","borderWidth","height","options","text","maintainAspectRatio","legend","table","onClick","Calculations","calculateCurrent","totalValue","currentAssets","Number","EPSILON","calculateNew","newTotalValue","reallocatedAssets","ticker","newShares","floor","buySell","newValue","cash","getElementById","AssetManager","addAsset","localStorage","setItem","parseInt","getItem","removeAsset","calculate","assets","calcs","targetPercentageTotal","loops","elem","getElementsByTagName","innerHTML","sort","calculations","JSON","stringify","ms","Promise","resolve","setTimeout","clear","window","location","reload","action","onSubmit","App","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.dbb90aa3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Inputs extends Component {\n  array = (n) => {\n    var arr = [];\n    for (var i = 1; i <= n; i++) {\n      arr.push(i);\n    }\n    return arr;\n  };\n\n  toggleReallocate = () => {\n    var inputs = document.getElementsByClassName(\"toggle\");\n    if (this.props.reallocate === \"true\") {\n      for (var j = 0; j < inputs.length; j++) {\n        inputs[j].style.display = \"inline\";\n        inputs[j].required = true;\n      }\n    } else {\n      for (var i = 0; i < inputs.length; i++) {\n        inputs[i].style.display = \"none\";\n        inputs[i].required = false;\n      }\n    }\n  };\n\n  componentDidMount() {\n    this.toggleReallocate();\n  }\n  componentDidUpdate() {\n    this.toggleReallocate();\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"inputs\">\n          {this.array(this.props.counter).map((count, index) => (\n            <div key={index} id={\"asset\" + count} className=\"input\">\n              {count}:<label htmlFor={\"ticker\" + count}>Ticker</label>\n              <input id={\"ticker\" + count} type=\"text\" required></input>\n              <label htmlFor={\"shares\" + count}>Shares</label>\n              <input id={\"shares\" + count} type=\"number\" required></input>\n              <label htmlFor={\"price\" + count}>Price</label>\n              <input id={\"price\" + count} type=\"text\" required></input>\n              <label className=\"toggle\" htmlFor={\"min\" + count}>\n                Target Percentage\n              </label>\n              <input\n                className=\"toggle\"\n                id={\"target\" + count}\n                type=\"number\"\n                required\n              ></input>\n            </div>\n          ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Inputs;\n","import { PieChart } from \"react-minimal-pie-chart\";\nimport randomColor from \"randomcolor\";\nimport { Bar } from \"react-chartjs-2\";\nimport React, { Component } from \"react\";\n\nclass Charts extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { display: \"percentage\" };\n  }\n\n  changeDisplay = () => {\n    this.state.display === \"percentage\"\n      ? this.setState({ display: \"value\" })\n      : this.setState({ display: \"percentage\" });\n    console.log(this.state.display);\n  };\n  // https://www.npmjs.com/package/react-minimal-pie-chart\n  pieChart = (arr) => {\n    var dataArray = [];\n    var colorArray = randomColor({\n      count: arr.length,\n      luminosity: \"light\",\n      hue: \"#213458\",\n    });\n    arr.forEach((arr, index) => {\n      arr.splice(-1, 1, colorArray[index]);\n      dataArray.push({\n        title: arr[0],\n        value: arr[arr.length - 2],\n        color: colorArray[index],\n      });\n    });\n\n    return (\n      <div className=\"pieChart\">\n        <div className=\"chart\">\n          <PieChart\n            className=\"piechart\"\n            data={dataArray}\n            label={({ dataEntry }) => `${Math.round(dataEntry.percentage)}%`}\n            animate\n            segmentsShift={0.75}\n            center={[55, 55]}\n            viewBoxSize={[110, 110]}\n          />\n        </div>\n\n        <div className=\"chartColors\">\n          {arr.map((arr, index) => (\n            <div className=\"color\" key={index}>\n              <div\n                className=\"square\"\n                style={{\n                  backgroundColor: arr[arr.length - 1],\n                }}\n              ></div>\n              {arr[0]}\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  };\n\n  // https://www.educative.io/edpresso/how-to-use-chartjs-to-create-charts-in-react\n  barChart = (arr, display) => {\n    var tickers = [];\n    var values = [];\n    arr.forEach((arr) => {\n      tickers.push(arr[0]);\n      values.push(arr[display === \"percentage\" ? arr.length - 2 : 1]);\n    });\n    values.push(0);\n    var state = {\n      labels: tickers,\n      datasets: [\n        {\n          label: display === \"percentage\" ? \"Percentage\" : \"Value\",\n          backgroundColor: \"#1F77AC\",\n          borderColor: \"#213458\",\n          borderWidth: 3,\n          data: values,\n        },\n      ],\n    };\n    return (\n      <div className=\"barChart\">\n        <Bar\n          className=\"bar\"\n          height={350}\n          data={state}\n          options={{\n            title: {\n              display: true,\n              text:\n                display === \"percentage\"\n                  ? \"Percentage of Portfolio\"\n                  : \"Asset Values\",\n            },\n            maintainAspectRatio: false,\n            legend: {\n              display: false,\n            },\n          }}\n        />\n      </div>\n    );\n  };\n\n  table = (arr, type) => {\n    return (\n      <div className=\"table\">\n        <table>\n          <thead>\n            <tr>\n              <th>Ticker</th>\n              <th>Value</th>\n              <th>Shares</th>\n              {type === \"reallocated\" ? <th>Buy/Sell</th> : null}\n              <th>Percentage</th>\n            </tr>\n          </thead>\n          <tbody>\n            {arr.map((arr, index) => (\n              <tr key={index}>\n                <td>{arr[0]}</td>\n                <td>{arr[1]}</td>\n                <td>{arr[2]}</td>\n                <td>{arr[3]}</td>\n                {type === \"reallocated\" ? <td>{arr[4]}</td> : null}\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  };\n\n  render() {\n    return (\n      <>\n        {this.table(this.props.dataArray, this.props.type)}\n        {this.pieChart(this.props.dataArray)}\n        {this.barChart(this.props.dataArray, this.state.display)}\n        <button onClick={this.changeDisplay}>\n          {this.state.display === \"percentage\"\n            ? \"View Value\"\n            : \"View Percentages\"}\n        </button>\n      </>\n    );\n  }\n}\nexport default Charts;\n","import React, { Component } from \"react\";\nimport Charts from \"./charts.js\";\n\nclass Calculations extends Component {\n  constructor(props) {\n    super(props);\n    // current [ticker,value,shares,percentage, color]\n    // reallocated [ticker, value, shares, buysell, percentage, color]\n    this.state = { currentAssets: [], reallocatedAssets: [] };\n  }\n\n  async componentDidMount() {\n    console.log(\"mounting\");\n    for (var i = 0; i < this.props.data.length; i++) {\n      var inputs = this.props.data[i];\n      document.getElementById(\"ticker\" + (i + 1)).value = inputs[0];\n      document.getElementById(\"shares\" + (i + 1)).value = inputs[1];\n      document.getElementById(\"price\" + (i + 1)).value = inputs[2];\n      if (inputs.length > 3) {\n        document.getElementById(\"target\" + (i + 1)).value = inputs[3];\n      }\n    }\n    await this.calculateCurrent();\n    if (this.props.reallocate === \"true\") {\n      this.calculateNew();\n    }\n  }\n\n  calculateCurrent = () => {\n    var inputs = this.props.data;\n    var totalValue = 0;\n    var currentAssets = [];\n\n    inputs.forEach((arr) => {\n      var value = arr[1] * arr[2];\n      currentAssets.push([arr[0], value, arr[1]]);\n      totalValue += arr[1] * arr[2];\n    });\n    currentAssets.forEach((arr) => {\n      arr.push(\n        Math.round(((arr[1] / totalValue) * 100 + Number.EPSILON) * 100) / 100\n      );\n      arr.push(\"none\");\n    });\n\n    this.setState({ currentAssets: currentAssets });\n    this.setState({ totalValue: totalValue });\n  };\n\n  calculateNew = () => {\n    var inputs = this.props.data;\n    var newTotalValue = 0;\n    var reallocatedAssets = [];\n\n    inputs.forEach((arr) => {\n      var ticker = arr[0];\n      var newShares = Math.floor(\n        ((arr[3] / 100) * this.state.totalValue) / arr[2]\n      );\n      var buySell = newShares - arr[1];\n      var newValue = newShares * arr[2];\n\n      newTotalValue += newValue;\n      reallocatedAssets.push([ticker, newValue, newShares, buySell]);\n    });\n    reallocatedAssets.push([\n      \"CASH\",\n      this.state.totalValue - newTotalValue,\n      0,\n      0,\n    ]);\n    reallocatedAssets.forEach((arr) => {\n      arr.push(\n        Math.round(\n          ((arr[1] / this.state.totalValue) * 100 + Number.EPSILON) * 100\n        ) / 100\n      );\n      arr.push(\"none\");\n    });\n\n    this.setState({ cash: this.state.totalValue - newTotalValue });\n    this.setState({ reallocatedAssets: reallocatedAssets });\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"calculations\">\n          <div className=\"currentAssets\">\n            <h1>Current Allocation</h1>\n            <Charts dataArray={this.state.currentAssets} type=\"current\" />\n          </div>\n          <div className=\"reallocatedAssets\">\n            <h1>New Allocation</h1>\n            <Charts\n              dataArray={this.state.reallocatedAssets}\n              type=\"reallocated\"\n            />\n          </div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Calculations;\n","import React, { Component } from \"react\";\nimport Inputs from \"./inputs.js\";\nimport Calculations from \"./calculations.js\";\n\nclass AssetManager extends Component {\n  constructor() {\n    super();\n    this.state = {};\n    // if (localStorage.getItem(\"counter\")) {\n    //   this.state.counter = parseInt(localStorage.getItem(\"counter\"));\n    // } else {\n    //   this.state.counter = 1;\n    //   localStorage.setItem(\"counter\", 1);\n    // }\n    // if (localStorage.getItem(\"reallocate\")) {\n    //   this.state.reallocate = localStorage.getItem(\"reallocate\");\n    // } else {\n    //   this.state.reallocate = \"true\";\n    //   localStorage.setItem(\"reallocate\", \"true\");\n    // }\n    // if (localStorage.getItem(\"calculations\")) {\n    //   this.state.calculations = JSON.parse(\n    //     localStorage.getItem(\"calculations\")\n    //   );\n    // } else {\n    //   this.state.calculations = [];\n    // }\n    //  Test 1\n    // ---------------------------\n    this.state.counter = 3;\n    this.state.reallocate = \"true\";\n    this.state.calculations = [\n      [\"APPL\", 30, 150, 20],\n      [\"AMD\", 100, 75, 20],\n      [\"VFV\", 130, 70, 60],\n    ];\n    // ----------------------------\n    // Expected Outcome = [AMD, 4200, 56shares, sell44, 19.91% ],\n    //                    [APPL, 4200,28shares,sell2,19.91%],\n    //                    [VFV, 12600, 180shares, buy50, 59.7%],\n    //                    [CASH, 100]\n  }\n\n  sleep(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  addAsset = () => {\n    localStorage.setItem(\n      \"counter\",\n      parseInt(localStorage.getItem(\"counter\")) + 1\n    );\n    this.setState({ counter: parseInt(localStorage.getItem(\"counter\")) });\n  };\n\n  removeAsset = () => {\n    if (this.state.counter > 1) {\n      localStorage.setItem(\n        \"counter\",\n        parseInt(localStorage.getItem(\"counter\")) - 1\n      );\n      this.setState({ counter: localStorage.getItem(\"counter\") });\n    }\n  };\n\n  calculate = () => {\n    var assets = document.getElementsByClassName(\"assetInputs\");\n    var calcs = [];\n    var targetPercentageTotal = 0;\n    for (var i = 0; i < assets.length; i++) {\n      var loops;\n      var arr = [];\n      var elem = assets[i].getElementsByTagName(\"input\");\n      if (this.state.reallocate === \"true\") {\n        loops = 4;\n        targetPercentageTotal += parseInt(elem[3].value);\n      } else {\n        loops = 3;\n      }\n      if (targetPercentageTotal > 100) {\n        document.getElementById(\"error\").innerHTML =\n          \"Sum of Target Percentages must not exceed 100%\";\n        return false;\n      }\n      for (var j = 0; j < loops; j++) {\n        arr.push(elem[j].value);\n      }\n      calcs.push(arr);\n    }\n    calcs.sort();\n    this.setState({ calculations: calcs });\n    localStorage.setItem(\"calculations\", JSON.stringify(calcs));\n    console.log(\"submitted\");\n  };\n\n  render() {\n    return (\n      <>\n        <div className=\"assets\">\n          <h1>Asset Reallocator</h1>\n          <div className=\"buttons\">\n            <button onClick={this.addAsset}>Add Asset</button>\n            <button onClick={this.removeAsset}>Remove Last Asset</button>\n            <button\n              onClick={() => {\n                localStorage.setItem(\n                  \"reallocate\",\n                  localStorage.getItem(\"reallocate\") === \"true\"\n                    ? \"false\"\n                    : \"true\"\n                );\n                this.setState({\n                  reallocate: localStorage.getItem(\"reallocate\"),\n                });\n              }}\n            >\n              {this.state.reallocate === \"true\"\n                ? \"Current Allocation Only\"\n                : \"Reallocate Assets\"}\n            </button>\n            <button\n              onClick={() => {\n                localStorage.clear();\n                window.location.reload();\n              }}\n            >\n              Clear\n            </button>\n          </div>\n          <form\n            action=\"#\"\n            onSubmit={() => {\n              this.calculate();\n            }}\n          >\n            <Inputs\n              counter={this.state.counter}\n              reallocate={this.state.reallocate}\n            />\n            <button type=\"submit\" className=\"calculate\">\n              Calculate\n            </button>\n            <div id=\"error\"></div>\n          </form>\n        </div>\n        <Calculations\n          data={this.state.calculations}\n          reallocate={this.state.reallocate}\n        />\n      </>\n    );\n  }\n}\n\nexport default AssetManager;\n","import React from \"react\";\nimport AssetManager from \"./components/assetManager.js\";\nimport \"./style.css\";\n\nfunction App() {\n  return (\n    <>\n      <AssetManager />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}